{:.note}
本文所說的 name 這個字，泛指的是所有可以指派名稱的程式物件，包含 variable、constant、function、class、或其他任何可以指派(assign) name 的物件

{:.note}
dot notation 後面接的東西，通稱為 attribute，如 z.real() 表示 real 是 z 物件的 attribute

物件是執行時(runtime)才會建立，建立之後是可以修改的，另外
同個物件可以綁定多個名稱，這在其他語言中叫別名(aliasing)。對 immutable 物件來說，aliasing是可以忽略的，但對 mutable 來說，就像是傳遞 pointer 一樣，修改新 pointer 指向的內容，原本 pointer 指向的內容也會變更

```python
l = [1, 2, 3, 4, 5]
dupe = l 

dupe = dupe[:2]

print(dupe) # [1, 2]
print(l) # [1, 2, 3, 4, 5] 不受影響，因為 dupe[:2] 是回傳一個新的 list

dupe2 = l
dupe2[2] = 'x' # 修改也會動到

print(dupe_2) 	# [1, 2, 'x', 4, 5] 
print(l) 		# [1, 2, 'x', 4, 5]
```

## 命名空間 Namespace

顧名思義 namespace 為 name-space，name 指的是 variable 的 name，space 指的是可以存取這些 variable 的 space。namespace 目前是由 dict 構成，舉例來說，以下都是 namespaces (或稱 scope)
1. built-in names 的集合，像是 abs() 或是 exception names
2. module 的 global names
3. function 中的 local names
4. nesting function 中的 nonlocal names
從某種意義上來說，物件的 attributes 也形成了一個 namespace，這是所謂的 class local scope 


## 命名空間 Namespace 何時被建立?

namespace 是在不同的時間被建立，且有不同的生命週期。包含 built-in names 的 namespace 是在 interperter 啟動時建立且不會被刪除。

在 module 定義被載入時 (使用 import 語法)，module 的 global namespace 會建立，module 的 namespace 同樣也存在到 interperter 結束為止，如同 built-in 的 namespace。

當一個方法呼叫時，會建立一個 local 的 namespace，當方法 return 或是 exception發生時，namespace 則會刪除(遺忘)

關於 namespaces 重要的是，不同 namespace 的 names 之間是沒有關聯的，不同 modules 可以定義相同的 function name，只要使用時加上 module 名稱的 prefix 即可

```python
# 如果兩個 module 都有同樣的名稱
# mod1.py
def run():
	print('mod1')
	
# mod2.py
def run():
	print('mod2')
	
# main.py
import mod1
import mod2

mod1.run()
mod2.run()

# 以下 from import 寫法不好，會只能使用後 import 的 run()
# main2.py
from mod1 import run
from mod2 import run

run() # 'mod2'
```

## 何謂 Attribute Reference
嚴格說起，參考 module 中的 names ，這行為叫做 attribute reference，舉例來說 modname.funcname，modname 是 module名稱，而 funcname 是物件的 attribute，attribute 可以是唯獨的或是可寫入的，可寫入的 attribute 同樣也是可刪除的，刪除 module 或 class 的 attribute 可以使用 del 如下

```python
# my_module.py
def raise_exception():
	pass
	
# sample.py
from my_module import raise_exception

raise_exception() # 'raise_exception'

# 刪除後找不到 name 了
# name 'raise_exception' is not defined. 
del raise_exception 
raise_exception()
```


## Scope

在程式中，一個 name 的 scope 定義了哪一個區塊的程式可以明白的存取該 name，name 指的是是 variable、function、object 等。只有在該 name 的 scope 中的程式可以看見並存取該 name。應用 Scope 可以避免 name collision 和其他不可預測的行為。

在執行時的任意時間點，最多同時會有 3~4 個 scope 的 namespace 是可存取，這 4 個 scope 稍後介紹

Scope 是靜態決定的，而找尋 name 這件事情是動態的，是在執行當下才會去從內層到外層 scope，找出該 name

{:.note}
注意 : assignment 不會複製資料，它們只是將 name 綁定 (bind) 到 object。 刪除也是如此：語法 del x 是從 local scope 的 namespace 中刪除 x 的 binding。 事實上，所有引入新名稱的操作都使用本地範圍：特別是 import 語句和函數定義將模塊或函數名稱綁定在本地範圍內。

{:.note}
locals():
更新並回傳表示 current local symbol table 的 dictionary。在函式區塊而不是 class 區塊中呼叫 locals() 時會回傳自由變數 (Free variables)。請注意，在 module 階層中，locals() 和 globals() 是相同的 dictionary。


因為 Python 是 dynamically-typed 語言，所以 variable 只有在指派值時才會存在，function 和 class 只有在使用 def 或 class 後才會存在，而 module 只有在 import 後才會存在，總結來說，Python 的 name 可以透過以下之一的方式建立

1. x = value
2. import ...
3. def fun(): ....
4. def fun(arg1, arg2, ., argN) 方法內的參數定義
5. class myClass: ....

{:.note}
注意: assignment operations 和 reference/access operations 有一個重大的差異，那就是當我們 reference 一個 name，我們是試著取得他的內容(content) 或是值(value)，當我們 assign 一個 name，我們是試著建立(create)一個 name 或是試著修改(modify)他 

Python 使用 name assignment 或是 defininition 的位子來決定該 name 屬於哪一個 scope，舉例來說，在方法內 assign 值給 name，則該 name 會有一個 local scope，如果在所有方法之外 assign 值給 name，則該 name 會有一個 global scope

當我們可以存取某個 name，我們說這個 name 在 scope 內(in scope)，反之則是 name 在 scope 之外 (out of scope)

# Scope VS Namespace

在 Python 裡，scope 的概念與 namespace 的概念兩者緊密相關，Python 的 scope 決定程式中一個 name 的可見性(visiblity)，Python 的 scope 是用 dict 實作而來，將 name 對應(map) 到 objects，這些 dict 通常叫做 namespaces，這是 Python 實際用來儲存 name 的機制，這些特殊的屬性存在 __dict__ 中

當我們 import sys，我們可以使用 .keys() 來檢視 sys.__dict__ 的 keys，這會回傳一個 list 包含所有定義 module 中 top level 的所有 names，我們可以說，__dict__ 抓住 sys 的 namespace，且是 module scope 的 concrete representation

```python
import sys

print(sys.__dict__.keys())
dict_keys(['__name__', '__doc__', '__package__', '__loader__', '__spec__', ...])
```

進一步說，假設我們要存取定義在 sys 中的 __name__，一共有兩種方式可以 reference 
```python
sys.__name__
sys.__dict__['__name__']
```

# LEGB 規則

依序從內向外尋找 namespace
1. Local (or Function) scope
	此 scope 的建立是在 function call 不是 function def 時，所以每一個 function call 都會有自己的 local scope，就算同一個方法多次呼叫也是會產生多個 local scope
	
2. Enclosing(or nonlocal) scope 
	只存在巢狀 function 中，從最近的 enclosing scope 找起，包含非 local 且非 global 的 names(nonlocal 關鍵字的變數)
	
3. Global (or module) scope
	global scope 是 Python 程式、script與模組中最外層的 scope，此 scope 包含所有我們在程式或模組最上層定義的所有 name，此我們程式的任何地方也都可以存取此 scope 
	
4. Built-in Scope
	此特殊的 scope 是在執行 script 或是在 interactive session 開啟時，會建立並載入。此 scope 包含內建在 Python 的 keywords、functions、exceptions 與其他 attributes，此我們程式的任何地方也都可以存取此 scope 

當參考一個 name 時，則由內而外依序搜尋 scope。程式執行時，最多可以有 4 個 active 的 scope，任何時候可以保證至少有2個 active scope，global 與 built-in

{:.note}
唯有在 function 使用 name，才會存取 local scope。唯有在 nested function 中使用 name，才會存取 enclosing scope

## Local Scope

Local Scope 或稱 function scope，是 Python 在呼叫 function 時建立的 scope。每次呼叫 function 時，同時也建立一個新的 local scope。另一方面，我們可以將每個 def 語法和 lambda 表達式視為新的 local scope 的藍圖。每當我們呼叫 function 時，這些 local scope 就會存在。

預設下，方法內指派的參數與 name 只存在呼叫 function 所建立的 local scope 中。當 function return 時，local scope 會摧毀且 name 會被遺忘

```python
def square(base):
    result = base ** 2
    print(f'The square of {base} is: {result}')

square(10) # The square of 10 is: 100
print(result) # Isn't accessible from outside square()
```

{:.note}
當我們在呼叫 function 後試著存取 result 或是 base，Python 會傳回 NameError，因為 result 和 base 只存在呼叫 square() 時所建立的 local scope，當我們試著存取不在任何 scope 中的 name，我們會得到一個 NameError 錯誤訊息顯示 name 找不到

## __code__ 關鍵字

我們可以呼叫 function 的 __code__ 來檢視 function 的參數與 name，
```python
square.__code__.co_varnames
('base', 'result')
square.__code__.co_argcount
1
square.__code__.co_consts
(None, 2, 'The square of ', ' is: ')
square.__code__.co_name
'square'
```

## Nested Functions: The Enclosing Scope

Enclosing (nonlocal) scope 是當我們在 function 內加入 function。我們在 enclosing scope 定義的 name  通常被稱為 nonlocal names

```python
def outer_func():
    # 此區塊是 outer_func() 的 local scope
    var = 100  # A nonlocal var
    # 同時也是 inner_func() 的 enclosin scope
    def inner_func():
        # 此區塊是 inner_func() 的 local scope
        print(f"Printing var from inner_func(): {var}")

    inner_func()
    print(f"Printing var from outer_func(): {var}")

outer_func()
# Printing var from inner_func(): 100
# Printing var from outer_func(): 100

inner_func()
# NameError: name 'inner_func' is not defined
```

當我呼叫 outer_func() 時，我們會建立一個 local scope，而 outer_func() 的 local scope，同時也是 inner_func() 的 enclosing scope。從 inner_func() 看，此 scope 既不是 global scope 也不是 local scope，這是一個介於 local 與 global 之間的特殊 scope，叫做 enclosing scope。

{:.note}
某種意義上來說， inner_func() 是個 temporary function，只有在執行 enclosing function (outer_func())時才會建立。注意只有在 outer_func() 內才看的到 inner_func()

inner_func() 內可以看到我們在 enclosing scope 建立的所有 name，有一例外，就是在呼叫 inner_func() 後建立的 name，inner_func() 是看不的

```python
def outer_func():
    var = 100
    def inner_func():
        print(f"Printing var from inner_func(): {var}")
        print(f"Printing another_var from inner_func(): {another_var}")

    inner_func()
    another_var = 200  # This is defined after calling inner_func()
    print(f"Printing var from outer_func(): {var}")

outer_func()
# Printing var from inner_func(): 100
# NameError: free variable 'another_var' referenced before assignment in enclosing scope
```
 
## Modules: The Global Scope
從程式執行之際，我們就已經在 Python 的 global scope 中，Python 會將程式的 main script 轉成 __main__ 的模組，此模組的 namespace 即是我們程式的主要 global scope
 
{:.note}
在 Python，global scope 與 global names 的概念是與模組的檔案緊密相關，舉例來說，如果我們在模組的 top-level 定義一個 name，則對此模組來說，此 name 為 global 的，這也是為什麼這種 scope 也被稱為 module scope

如果我們是在 interactive session，我們會看到 __main__ 也是主模組的名稱

```python
>>> __name__
'__main__'
```

每當我們執行 Python 程式或是執行 interactive session 如上，編譯器會執行該模組或 script 裡的程式碼，當作我們程式的進入點，此模組或 script 會以一個特殊的名稱__main__載入，從此在之後，我們的 main global scope 就是 __main__ 的 scope

想檢查 main global scope 裡有的 names，我們可以使用 dir()。如果呼叫 dir() 沒有給參數，則是回傳目前 global scope 的 names 

```python
print(dir())
['__annotations__', '__builtins__',..., '__package__', '__spec__']
var = 100  # 新增變數後，會加入 global scope 
print(dir())
['__annotations__', '__builtins__',..., '__package__', '__spec__', 'var'] # 多了 var
```

{:.note}
程式執行時只會有一個 global scope，直到程式關閉時才會終止，name forgotten

## global 變數
{:.note}
使用 global 變數不是一個好的 practice，須盡量避免，請用改用別的方式改寫程式

{:.note}
好的程式習慣:
function 內使用 local name
物件 name 要獨特
避免修改 global name
避免跨模組修改 name
把 global name 當成常數

每當我們在 Python 中為 assign 值給 name 時，可能會發生以下兩種情況之一：

建立一個新 name 
更新一個現有的 name

具體行為是哪種，取決於我們是在哪個 scope 做 assignment。如果我們嘗試在 function 內要給 global name 做 assignment，那麼我們將在函數的 local scope 內建立該 name，隱藏或覆蓋 global name。這表示著我們將無法從 function 內部變更在 function 外定義的大多數變數 (除非使用 global 關鍵字)

```python
x = 10 # global 變數

def my_func():
	# 這裡實際是建立一個同名 x 的 local variable 
	# 這裡的 assignment 沒有真正改變 global 變數的值
	x = 5 
	print(x)

my_func()
print(x)
# 5
# 10 
```

再一個例子
```python
var = 100  # A global variable
def increment():
    # UnboundLocalError: local variable 'var' referenced before assignment
    var = var + 1  

increment()
```

以下 OK，讀取 global 變數後 print()
```python
var = 100  # global 變數
def increment():
    print(var)
    
increment()
```

以下 OK，讀取 global 變數後 print()
```python
var = 100  # global 變數
def increment():
    print(var)	# local variable 'var' referenced before assignment
	var = 200 	# 多了這行造成程式判斷前一行 var 為 local variable
    
increment()
```

{:.note}
Python 預設在 function 內的 assignment 都是 local variable

在方法內變更全域變數
```python
x = 10

def my_func():
	# local variable 'x' referenced before assignment 
	# 無法存取全域變數 x
	x = x * 2 
	pass
	
my_func()
```

使用 global 變數，在方法內變更全域變數
```python
x = 10

def my_func():
	global x # 關鍵字 global
	x = x * 2 
	print(x) # 20
	pass
	
my_func()
print(x) # 20 外面也被改變
```

如何分享全域變數
```python
# mod1.py
name = 'John'
age = 20

# mod2.py
import mod1

# mod2 修改 mod1 的全域變數
mod1.name = 'Queen'
mod1.age = 60

# sample.py
import mod1
import mod2

print(mod1.name, mod1.age) # 'Queen 60'
```

## nonlocal 關鍵字

用於 nested 方法，使用 nonlocal 來存取，nonlocal 只能存在於 nested function 的 enclosing scope，不能存在 local scope 或是 global scope
```python
x = 'global'

def outer():
	# nonlocal x 
	# 錯誤 no binding for nonlocal 'x' found
	# 這裡不能定義 nonlocal，因為沒有 nested 的外層方法
	x = 'outer'
	
	def inner():
		# 對inner()來說，outer()內的x，既非 local 也不是 global 變數
		nonlocal x 
		x = 'inner'
		print('inner:', x)
	
	inner()
	print('outer:', x)
	
outer()

print('global:', x)

# inner: inner
# outer: inner
# global: global
```

{:.note}
這裡說一個 Python 奇特的地方，當沒有使用 global 或是 nonlocal 關鍵字時，對 name 做指派 (assignment) 值時，永遠都是在指派給該 scope 中的變數，也就是若是該 scope 中沒有此 name，則會建立一個 name 做 assignment。就算外層有相同名稱的 name，也是在該 scope 建立一個相同名稱的 name


## builtins: The Built-In Scope

built-in scope 是一個特殊的 Python scope，它在 Python 3.x 中實做為名為 builtins 的 standard library module。 Python 的所有 built-in 物件都存在於這個 scope 中。當執行 Python 編譯器時，它們會自動載入到 built-in scope 中。 Python 依照 LEGB 規則最後才搜尋 built-in scope，因此我們可以免費獲得它定義的所有 name。這表示我們可以在不導入任何 module 的情況下使用它們。

注意 builtins 的 names 會總是載入到一個名為 __builtins__ 的 global Python scope
```python
dir()
# ['__annotations__', '__builtins__',..., '__package__', '__spec__']
# global Python scope

dir(__builtins__)
# ['ArithmeticError', 'AssertionError',..., 'tuple', 'type', 'vars', 'zip']
# 取得 Python 的 built-in names

len(dir(__builtins__))
# 152


# 也可以明確 import builtins 模組，並使用 dot notation 呼叫
import builtins
builtins.sum([1, 2, 3, 4, 5])
# 15

# 也可直接使用 __builtins__，並使用 dot notation 呼叫
import builtins
__builtins__.sum([1, 2, 3, 4, 5])
# 15
```

上述使用明確 import builtins 去使用內建方法，可以明確避免 collision 發生，因為我們明確知道我們要呼叫的函數為內建函數，而不是其他同名的自訂函數

built-in names 可以被覆寫，如下
```python
abs(-15)  # Standard use of a built-in function
# 15
abs = 20  # Redefine a built-in name in the global scope
abs(-15) 
# TypeError: 'int' object is not callable
# abs 被改寫了
```

{:.note}
改寫 built-in names 最好步要做

總結，global name 與 local name 需用不同的名稱

## 使用 enclosing scope 當成 closure

Closures 是 enclosing Python scope 的一個特例，nested function 的內層 function 會被當成 data 傳出去，在此同時會記錄當下的外層 nested function 的環境，像是變數的值，這回傳的東西就稱為 closure，closure 是 inner 或 nested function 會傳遞 enclosing scope 的資訊，即使該 scope 已執行完畢

我們還可以將這種函數稱為 factory、function factory，或者更準確地說是 closure factory，以指定函數構建和返回 closure(inner function)，而不是 class 或 instance。

closure 提供了一種在 function calls 之間保留狀態信息的方法。當我們想要基於 lazy 或 delayed evaluation的概念撰寫程式時，這可能很有用。

```python
def power_factory(exp):
    def power(base):
        return base ** exp
    return power
square = power_factory(2)
square(10)
100
cube = power_factory(3)
cube(10)
1000
cube(5)
125
square(15)
225
```

{:.note}
注意 : 像 exp 這樣的變數叫做 free variables。他們是在 code block 使用中但沒有在那定義，free variables 是 closure 可以在不同 function call 中保留狀態的原因

```python
def mean():
    sample = []
    def _mean(number):
        sample.append(number)
        return sum(sample) / len(sample)
    return _mean

current_mean = mean()
current_mean(10)
10.0
current_mean(15)
12.5
current_mean(12)
12.333333333333334
current_mean(11)
12.0
current_mean(13)
12.2
```

## 使用 import 將 name 加入 scope

編寫 Python 程式時，通常會將程式組織成幾個 module。我們需要將這些單獨 module 中的 name 帶到我們的 __main__ module 中。為此，我們需要 import module_name 或是 from module_name import name。這是可以在 main global Python scope 中使用這些 name 的唯一方法。

## 特殊的 scope 

## Comprehension Variables Scope

```python
>>> [item for item in range(5)]
[0, 1, 2, 3, 4]
>>> item  # 試著存取 comprehension variable
# Traceback (most recent call last):
#   File "<stdin>", line 1, in <module>
#     item
# NameError: name 'item' is not defined
```

但是一般的 for loop，在 loop 外是可以存取 loop variable 的
```python
>>> for item in range(5):
    print(item)
...
0
1
2
3
4
>>> item  # Access the loop variable
4
```

## Exception Variables Scope

另一個 Python scope 的特殊案例是 exception variables。exception variables 是一個變數，當 try 語法觸發一個 exception，該變數會指向該 exception。在 Python 3.x 中，此類變數僅存在 except 區塊的 local scope，並且在 except 區塊結束時被遺忘。

```python
lst = [1, 2, 3]
try:
    lst[4]
except IndexError as err:
    # err 僅存在此 block
	ex = err # 可將此 err 傳出去，則可以
    print(err)


print(err) 	# NameError: name 'err' is not defined
print(ex) 	# 這樣可以
```

## Class and Instance Attributes Scope

當我們定義一個 class 時，我們正在建立一個新的本地 Python scope。在 class 的 top-level assign 的 name 存在於這個 local scope 中。我們在 class 中 assign 的 name 不會與其他地方的 name 發生衝突。可以說這些 name 遵循 LEGB 規則，其中 class block 代表 L 級。

與函數不同，class 的 local scope 不是在呼叫時建立的，而是在執行時建立的。每個 class 物件都有自己的 .__dict__ 屬性，該屬性包含所有 class attribute 所在的 class scope 或 namespace。看看這段程式：

```python
class A:
   attr = 100
print(A.__dict__.keys())
#dict_keys(['__module__', 'attr', '__dict__', '__weakref__', '__doc__'])
```

當檢查 .__dict__ 的 keys() 時，我們會看到 attr 與其他特殊 name 一起在列表中。該 dict 為 class 的 local scope。此 scope 內的 name 對 class的所有 instance 和 class 本身都是可見的。

要從 class 外部存取 class 的 attribute，需要使用點符號，如下所示：

```python
class A:
    attr = 100
    print(attr)  # 在 class 裡可直接存取 attributes

100
A.attr  # class 外存取 attribute

attr
# NameError: name 'attr' is not defined

A.attr2
# AttributeError:
# 試著存取不存在的 attribute我們
# type object 'A' has no attribute 'attr2'
```

可以使用物件透過 dot notation 存取 class attribute
```python
>>> obj = A()
>>> obj.attr
100
```

在建立 instance 後，我們可以使用 dot notation 存取 class 的 attribute，就像我們在此處使用 obj.attr 所做的那樣。class attribute 是特定於 class object，但我們可以從 class 的任何 instance 存取它們。值得注意的是，class attribute 對 class 的所有 instance都是通用的。如果我們修改 class attribute，則更改將在該 class 的所有 instance 中可見。

注意：把點表示法想像成我們在告訴 Python：“在 obj 中查找名為 attr 的屬性。如果我們找到了，就把它還給我。”

每當我們呼叫用一個 class 時，我們就是在建立該 class 的一個新的 instance。 instance 有自己的 .__dict__ 屬性，該屬性保存 instance 的 local scope 或 namespace 中的 name。這些 names 通常稱為 instance attributes，每個 instance 有自己的 instance attributes。這表示著如果我們修改 instance attribute，則更改將只對該 instance 有效。

要從 class 內部建立、更新或存取任何 instance attribute，我們需要使用 self 和 dot notation。這裡，self 是一個特殊的 attribute，表示當前 instance。另一方面，要從 class 外部更新或存取任何 instance attribute，我們需要建立一個 instance，然後使用點表示法。這是它的工作原理：

```python
class A:
    def __init__(self, var):
        self.var = var  # 建立新的 instance attribute
        self.var *= 2  # 更新 instance attribute

obj = A(100)
print(obj.__dict__) # {'var': 200}
print(obj.var) # 200
```

class A 接受一個名為 var 的參數，它使用賦值操作 self.var *= 2 在 .__init__() 內自動加倍。請注意，當您檢查 obj 上的 .__dict__ 時，您會得到一個包含所有 instance attribute 的字典。在這種情況下，字典僅包含名稱 var，其值現在為 200。

instance attribute 最好在 __init__ 內初始化

```python
class A:
    def __init__(self, var):
        self.var = var

    def duplicate_var(self):
        return self.var * 2

obj = A(100)
print(obj.var) # 100
print(obj.duplicate_var()) # 200

A.var
# class A '物件'沒有 attribute A
# AttributeError: type object 'A' has no attribute 'var'
```

如果我們嘗試使用 class object 而不是 instance 來存取 var，那麼我們將收到 AttributeError，因為無法使用 class object 存取 instance attribute。

{:.note}
class object 無法存取 instance attribute

總結來說，每當需要存取 attribute 時，Python 程式第一個會看 instance local scope 或 namespace，若沒有的話再來看 class local scope 或 namespace，如果也不存在 class namespace，則丟出 AttributeError

雖然 class 會定義一個 class local scope 或 namespace，但他們不會建立 methods 的 enclosing scope。因此，當我們實作一個 class 時，參考 attributes 與 methods 時都必須使用 dot notation

```python
class A:
	var = 100
    def print_var(self):
        print(var)

A().print_var() # NameError: name 'var' is not defined
```

因為 classes 不會幫 method 建立 enclosing scope，所以我們不能從 print_var() 直接存取 var。要從任意 method 中存取 class attributes 我們必須使用 dot notation。

```python
class A:
	var = 100
    def print_var(self):
		print(self) 	# <__main__.A object at ....>
        print(A.var) 	# 要用 dot notation 存取 var
		print(self.var)	# 要用 dot notation 存取 var	

A().print_var() # NameError: name 'var' is not defined
```

我們可以以 instance attribute 覆寫 class attribute，這樣會變更我們 class 的 general behavior，但是，我們可以同時存取兩種 attribute 使用 dot notation 如下所示：

```python
class A:
    var = 100
    def __init__(self):
        self.var = 200
    def access_attr(self):
        # Use dot notation to access class and instance attributes
        print(f'The instance attribute is: {self.var}')
        print(f'The class attribute is: {A.var}')
obj = A()
obj.access_attr()
The instance attribute is: 200
The class attribute is: 100
print(A.var)  # Access class attributes
# 100
print(A().var) # Access instance attributes
# 200
print(A.__dict__.keys())
# dict_keys(['__module__', 'var', '__init__',..., '__getattribute__'])
print(A().__dict__.keys())
# dict_keys(['var'])
```

上述 class 有同名的 instance attribute 與 class attribute 名為 var. 

Instance: 使用 self.var 存取 instance attribute.
Class: 使用 A.var 存取 class attribute.

{:.note}
好的 OOP 準則不建議我們使用 instance attributes 蓋過 class attributes

{:.note}
注意 class 的 .__dict__  與 instance 的 .__dict__ 室兩者獨立不同的 dict，這也是為什麼 class attributes 在我們 run 或 import 模組內定義的 class 時就是 available 的，反之 instance attributes 只有在建立物件後才會 available
