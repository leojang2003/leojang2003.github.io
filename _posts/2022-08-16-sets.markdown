---
layout: post
title: Set
subtitle: 
tags: []
comments: true
---

## 什麼是 set
<mark><b>set</b></mark> 是沒有重複元素的無序集合。不支援 indexing，set 的元素必須是 hashable。

<br/>

## set 種類
有 set、frozenset 兩種，set 是 immutable，因為是 immutable 所以沒有 hash 值，因此不能作為 dict 的 key 或是另一個 set 的元素，frozenset 則相反。

```python

s2 = frozenset([4, 5, 6])

sum = {'a', 'b', s2} # frozenset 可以當作 set 的元素

sum # {frozenset({4, 5, 6}), 'a', 'b'}

```

<br/>

## 如何建立一個空的 set

set( ) 函數可用於建立一個空的 set。

{:.note} 
要建立一個空集，你必須使用 set( )，而不是大括號 { }，{ } 會建立一個空的 dict。

<br/>

## 如何建立一個有資料的 set

第一種方法，使用 { } 用逗號隔開

```python

basket = {'apple', 'orange', 'apple', 'pear', 'orange', 'banana'}

```

第二種方法，使用 set()

```python

s1 = set('foobar')
s2 = set(['a', 'b', 'foo'])

a = set('abracadabra')
b = set('alacazam')

a  # {'a', 'r', 'b', 'c', 'd'}
b  # {'a', 'l', 'c', 'z', 'm'}

```

第三種方法，使用 Set Comprehensions

```python

a = {x for x in 'abracadabra' if x not in 'abc'}
a # {'r', 'd'}

``` 
<br/>

## 建立 set 時，重複的元素會被移除
<br/>
```python

basket = {'apple', 'orange', 'apple', 'pear', 'orange', 'banana'}

basket # {'orange', 'banana', 'pear', 'apple'} 
# 這裡可以看到重複的元素被移除了

```
<br/>

## set 的參數

set( ) 方法接受一個 iterable 的參數，像是 list、tuple、string

```python

l = ['a', 'b', 'b']
set(l) # {'a', 'b'}

t = ('a', 'b', 'b')
set(t) # {'a', 'b'}

s = 'abb'
set(s) # {'a', 'b'}

# 可以看到 list、tuple、string 轉成 set 後
# 都將重複的元素的移除

```
<br/>

## set 支援的運算

add()

```python

s = {1, 2, 3}
s.add(4)
s
# {1, 2, 3, 4}

```

remove()

```python

s.remove(4)
s.remove(2)
s
# {1, 3}

```

len()

```python

len(s)
# 2

```

set 是否包含某個物件時，可以用 in / not in

```python

basket = {'apple', 'orange', 'apple', 'pear', 'orange', 'banana'}

'orange' in basket # True
'crabgrass' in basket # False
'crabgrass' not in basket # True

```

x.isdisjoint(other)

```python

# 回傳 True 如果 set 沒有與 other 的元素重複

s1 = {1, 2, 3, 4, 5, 6}
s2 = {2, 4, 6}

s1.isdisjoint(s2) # False
# s1 的元素沒有在 s2 中

s2.isdisjoint(s2) # False

```

issubset(other) 或 set <= other

```python

# set 的元素是否都在 other 中，set 與 other 可以相同

s1 = {1, 2, 3, 4, 5, 6}
s2 = {2, 4, 6}
s3 = {2, 4, 6}

s2 <= s1 # True

s2 <= s3 # True

```

set < other

```python

# set 的元素是否都在 other 中，set 與 other 不可以相同

s1 = {1, 2, 3, 4, 5, 6}
s2 = {2, 4, 6}
s3 = {2, 4, 6}

s2 < s1 # True

s2 < s3 # False

```

issuperset(other) 或 set >= other

```python

# other 的元素是否都在 set 中，set 與 other 可以相同

s1 = {1, 2, 3, 4, 5, 6}
s2 = {2, 4, 6}
s3 = {2, 4, 6}

s1 >= s2 # True

s2 >= s3 # True

```

set > other

```python

# other 的元素是否都在 set 中，set 與 other 不可以相同

s1 = {1, 2, 3, 4, 5, 6}
s2 = {2, 4, 6}
s3 = {2, 4, 6}

s1 > s2 # True

s2 > s3 # False

```

聯集，可以超過2個以上

```python

a = {1, 2, 3}
b = {4, 5}
c = {5, 6}

a | b 
# {1, 2, 3, 4, 5}

a | b | c
# {1, 2, 3, 4, 5, 6}

a.union(b, c)
# {1, 2, 3, 4, 5, 6}

a.union(b).union(c)
# {1, 2, 3, 4, 5, 6}

```

差集，可以超過2個以上

```python

a = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
b = {2, 4, 6, 8, 10}
c = {1, 3, 5, 7, 9}

a - b
# {1, 3, 5, 7, 9}

a - c
# {2, 4, 6, 8, 10}

a - b - c
# set()

a.difference(b)
# {1, 3, 5, 7, 9}

a.difference(c)
# {2, 4, 6, 8, 10}

b.difference(c)
# {2, 4, 6, 8, 10}

a.difference(b,c)
# set()


```

交集，可以超過2個以上

```python

a & b
# {2, 4, 6, 8, 10}

a & c
# {1, 3, 5, 7, 9}

b & c
# set()

a.intersection(b)
# {2, 4, 6, 8, 10}

a.intersection(c)
# {1, 3, 5, 7, 9}

a.intersection(b, c)
# set()

```


僅出現在其中一個集合中，不同時出現在兩個

```python

a ^ b
# {1, 3, 5, 7, 9}

a ^ c
# {2, 4, 6, 8, 10}

b ^ c
# {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}

a ^ b  ^ c
# set()

a.symmetric_difference(b)
# {1, 3, 5, 7, 9}

# symmetric_difference 只支援一個參數

```

只要是 iterable 都可以做 Set Comprehensions

```python

dict = {"a":1, "b":2, "c":3}
dict2 = {"a":1, "q":2}

a = {x for x in dict2 if x not in dict}
a # {'q'}
# 在 dict2 不在 dict 的 key 只有 q

```
<br/>
<br/>
<br/>
