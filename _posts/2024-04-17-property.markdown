---
layout: post
title: property
subtitle: 
tags: [property, string interpolation, managed attribute]
comments: true
---

請先閱讀 <a href="../2024-04-17-descriptor/">描述器 descriptor</a>

使用 Python 的 property ( )，我們可以在類別建立 managed attribute，managed attribute 也就是所謂的 property，用於在不破壞 public API 下，可以變更內部實作方式。

舉例來說，使用者讀取 A.p 這裡的 p 就是 public API 給外界讀取，我們可以變更 property p 的實作方式，而使用者呼 p 的方式保持不變。

<br/>

### 簡單的 get / set (Anti Pythonic)

```python
class Point:

    def __init__(self, x, y):
        self._x = x
        self._y = y

    def get_x(self):
        return self._x

    def set_x(self, value):
        self._x = value

    def get_y(self):
        return self._y

    def set_y(self, value):
        self._y = value

p = Point(20,30)      

p._x
# 20 
# 還是可以存取 _ 開頭的變數
```  

{:.note}
Python 沒有所謂的 private，只能在命名時加註底線，但該 attribute 還是可存取的。

<br>

### get / set (Pythonic)

因為上述的 getter、setter 並沒有對 _x、_y 做特別的處理，比較 Pythonic 的方式如下...

```python
class Point:

    def __init__(self, x, y):
        self.x = x
        self.y = y


point = Point(12, 5)
point.x 
point.y

point.x = 42
point.x
``` 

上述顯示了一個 Python 的基本概念，也就是曝露 attribute 給終端使用者在 Python 是相當普遍的。我們不需要使用 getter / setter 來包裹類別，但我們要怎麼處理需求牽涉到 API 變更?

{:.note}
解答: 將 attribute 轉為 property ( 另一種方式為使用 descriptor )

<br/>

Property 像是介於一般 attribute 與 method 之間。比如說，我們可以將 .x 與 .y 變成 property，之後以存取 attribute 的方式去存取 property，檯面下我們也會有方法持有 .x 和 .y 背後的值，這些方法讓我們可以修改 property 內部的實作方式。

{:.note}
property 非 Python 獨有，JavaScript, C#, Kotlin 也有類似的

<br/>

property 的主要優點在於，讓我們得以用 public API 的方式揭露 attribute。當我們需要變更底下的實作時，我們只需要將 attribute 改為 property 即可輕易修改。

<br>

### property ( ) 簡介

property ( ) 是建立 managed attribute 最受歡迎的方式。

嚴格算起來，property 是一個類別 ( descriptor 類別 )，但設計成 function 的用法，所以 Python 開發人員會稱 property 為 function，這也是 property 不像其他類別是大寫開頭的。 

使用 property ( )，我們可以將 getter / setter 方法附加到類別的 attribute。這樣，我們可以處理 attribute 內部的實作而不會曝露出 getter / setter<i/> 方法的實作細節。 

以下是 property 的規格，property ( fget = None , fset = None , fdel = None , doc = None )，前三個參數接受 function 物件。

fget - function 用於回傳 property 的 value<br class="new">
fset - function 用於設定 property 的 value <br class="new">
fdel - function 定義 property 如何處理刪除<br class="new">
doc - property 的 docstring<br class="new">

property ( ) 回傳 managed attribute 本身。 如果我們存取 managed attribute，如 obj.attr，Python 會自動呼叫 fget ( )。如果我們指派值給 attribute，如 obj.attr = value，Python 會呼叫 fset ( ) 並將值傳入參數，如果我們執行 del obj.attr，則 Python 會呼叫 fdel ( )，有設定 doc 的話，使用 help ( ) 可以顯示 docstring 的內容

{:.note}
property ( ) 的前三個參數為 function 物件，我們可以將 function 物件想像成沒有括號 ( ) 的 function。

<br/>

### 使用 property ( ) 建立 attribute

我們可以將 property ( ) 使用成 function 或 decorator，decorator 是較為常見的作法，但首先我們先試著使用 function 的方式建立 property。

```python
class Circle:

    def __init__(self, radius):
        self._radius = radius

    def _get_radius(self):
        print("Get radius")
        return self._radius

    def _set_radius(self, value):
        print("Set radius")
        self._radius = value

    def _del_radius(self):
        print("Delete radius")
        del self._radius
    
    radius = property(
        fget=_get_radius,
        fset=_set_radius,
        fdel=_del_radius,
        doc="The radius property." # help()時可以顯示
    )

circle = Circle(42.0)
print(circle.radius)

circle.radius = 100.0
``` 

{:.note}
上述程式中，radius 是一個 class attribute 存放 property 物件。

 radius 隱藏非公開的 instance attribute 也就是 _radius )，而 _radius 就是 managed attribute，我們可以直接存取 radius，內部 Python 會視情況自動呼叫 _get_radius ( ) 與 _set_radius ( )。

{:.note}
_radius 是非公開的的 instance attribute。

總結來說，property 是用於管理 instance attribute 的一個 class attribute ，我們可以把 property 想成 method 集合在一起。

```python
Circle.radius.fget
<function Circle._get_radius at ...>

Circle.radius.fset
<function Circle._set_radius at ...>

Circle.radius.fdel
<function Circle._del_radius at ...>

dir(Circle.radius)
# [..., '__get__', ..., '__set__', ...]

c = Circle(20)
Circle.radius.__set__(c, 60)
Circle.radius.__get__(c)
```

如果我們用 dir ( ) 檢查 property 的內部成員，會發現 \_\_set__ ( ) 與 \_\_get__ ( ) 會在清單中。這些方法實作了 descriptor 的協議。

當我們沒有提供自訂的 setter 方法時，預設的 \_\_set__ ( ) 會執行，此時我們會收到一個 AttributeError 因為程式不知道如何設定 property，說明如下。

```python
# 檔案 pyproperty.py
class Property:

    "模擬 PyProperty_Type() in Objects/descrobject.c"

    def __init__(self, fget=None, fset=None, fdel=None, doc=None):
        print('Property __init__', fget)
        self.fget = fget
        self.fset = fset
        self.fdel = fdel
        if doc is None and fget is not None:
            doc = fget.__doc__
        self.__doc__ = doc
        self._name = ''

    def __set_name__(self, owner, name):
        print('__set_name__', name)
        self._name = name

    def __get__(self, obj, objtype=None):
        print('__get__')
        if obj is None:
            return self
        if self.fget is None:
            raise AttributeError(f'unreadable attribute {self._name}')
        return self.fget(obj)

    def __set__(self, obj, value):
        print('__set__')
        if self.fset is None:
            raise AttributeError(f"can't set attribute {self._name}")
        self.fset(obj, value)

```

### 使用裝飾器 @property 建立 attribute  

首先複習一下裝飾器 @decorator，簡單的裝飾器語法如下

```python
@decorator
def func(a):
    return a
```

等同於

```python
def func(a):
    return a

func = decorator(func)
``` 

現在來看要如何使用裝飾器 @property 來建立 property。
        
```python
# 引入模擬的 Property 類別
import pyproperty

class Circle:

    def __init__(self, radius):
        print('呼叫 Circle 的 __init__', radius)
        self._radius = radius

    @pyproperty.Property
    def radius(self):
        """The radius property."""
        print("呼叫 Circle 的 radius")
        return self._radius
```
        
在還沒有初始化物件前，執行後顯示結果如下

```python
# 呼叫 Property 的 __init__ fget  <function Circle.radius at 0x0000017D3243B2E0>
# __set_name__ radius
```

因為 @property 的語法，等同於 radius = pyproperty.Property ( radius )，所以會執行 Property 類別的 \_\_init__ 方法，pyproperty.Property ( radius ) 會回傳 pyproperty.Property 物件，此時 Circle 就有一個名為 radius 的 pyproperty.Property 物件。

我們可以初始化 Circle 並成功存取 _radius。

```python
c2 = Circle(607.0)
print('c2._radius=', c2._radius, 'id=', id(c2._radius))

# 呼叫 Circle 的 __init__ 607.0
# c2._radius= 607.0 id= 2525236677200
```

假設我們要讀 property，則我們可以看到 c2.radius 會呼叫 Property 的 \_\_get__，然後呼叫 fget

```python
print('c2.radius=', c2.radius)

# __get__
# 呼叫 Circle 的 radius
# c2.radius= 607.0 id= 2525236677200
```

如果我們在 Circle 新增 setter 方法，可以看到 setter 方法回會傳一個新的 Property 物件，我們可以看到前後的 radius 物件的位址是不一樣的，這裡我們將呼叫 setter 前的 radius 指派給 old_radius 作測試。

```python 
import pyproperty

class Circle:

    def __init__(self, radius):
        print('呼叫 Circle 的 __init__', radius)
        self._radius = radius

    @pyproperty.Property
    def radius(self):
        """The radius property."""
        print("呼叫 Circle 的 radius")
        return self._radius
    
    # 我們這裡將 radius 放到 old_radius
    old_radius = radius
    
    print('radius before setter=', radius)
    print('old_radius before setter =', old_radius)
    
    @radius.setter
    def radius(self, value):
        print("Set radius")
        self._radius = value
        
    print('radius after setter=', radius)
    print('old_radius after setter =', old_radius)
    
# 呼叫 Property 的 __init__ fget= <function Circle.radius at 0x000002354EE0B130>
# radius before setter = <pyproperty.Property object at 0x000002354EDEFC40>
# old_radius after setter = <pyproperty.Property object at 0x000002354EDEFC40>
#
# setter called
#
# 呼叫 Property 的 __init__ fget= <function Circle.radius at 0x000002354EE0B130>
# radius after setter = <pyproperty.Property object at 0x000002354EDEFB20>
# old_radius after setter = <pyproperty.Property object at 0x000002354EDEFC40>
#
# __set_name__ radius
# __set_name__ old radius 
```

一開始我們使用 @pyproperty.Property 裝飾 radius 方法，我們知道這等同於 radius = Property ( radius , None , None , None )，radius 變成了一個 Property 物件，接著我們使用 @radius.setter 裝飾 Circle 類別同名的 radius ( setter ) 方法，這裡我可以理解成是使用 radius 物件的 setter 方法，即 radius.setter，加上一個 @ 做裝飾，Property 的 setter 方法會將舊有的 fget 與新的 fset 打包成一個新的 Property 物件回傳，因此我們可以發現呼叫 setter 後 Property 物件的 id 已經變了。

我們沒辦法幫 old_radius 指派值，因為 old_radius 只有設定 getter，所以出現AttributeError，但當我們設定 c2.radius = 900 時，c2.old_radius 也一併變成 900。

```python
c2 = Circle(607.0)
c2.old_radius = 100 
# AttributeError: can't set attribute g

c2.radius = 900

print('c2.old_radius =', c2.old_radius) 
# c2.old_radius = 900
```

最後是完整使用 property 修飾的 Circle 類別如下

```python
# circle.py
class Circle:

    def __init__(self, radius):
        self._radius = radius

    @property
    def radius(self):
        """The radius property."""
        print("Get radius")
        return self._radius

    @radius.setter
    def radius(self, value):
        print("Set radius")
        self._radius = value

    @radius.deleter
    def radius(self):
        print("Delete radius")
        del self._radius
``` 

複習一下，當我們使用 @radius.setter 裝飾第二個 .radius ( ) 函式，setter 會回傳一個新的 property ( 注意，是回傳一個新的 property ) ，然後重新指派 .radius 這個 name，這個新的 property 會包含原先的 getter 與 新的 setter 函式。

```python
 dir(Circle.radius)
# [..., 'deleter', ..., 'getter', 'setter']
``` 

除了 .fget、.fset、.fdel, ... 外，property 也提供 .deleter ( )、.getter ( ) 與 .setter ( )，這三個方法會回傳一個新的 property 物件。

<br/>

### 唯讀的 property

一種 property ( ) 的基本的用法是，property ( ) 也可以替你的類別提供唯讀的 attribute

```python
# point.py
class Point:

    def __init__(self, x, y):
        self._x = x
        self._y = y

    @property
    def x(self):
        return self._x

    @property
    def y(self):
        return self._y
``` 

現在 x、y 都是唯讀，當使用者嘗試 point.x = 42 時，會出現錯誤。

```python
from point import Point

point = Point(12, 5)

print(point.x)
print(point.y)

point.x = 42 
# AttributeError
``` 

<br/>

### 設定讀寫 read-write 的 property

```python
import math

class Circle:

    def __init__(self, radius):
        self.radius = radius

    @property
    def radius(self):
        return self._radius

    @radius.setter
    def radius(self, value):
        self._radius = float(value)

    @property
    def diameter(self):
        return self.radius * 2

    @diameter.setter
    def diameter(self, value):
        self.radius = value / 2
```

{:.note}
注意 \_\_init__ 裡面，是呼叫 self.radius = radius，而不是 self._radius = radius，這是因為呼叫 self.radius 會透過 @radius.setter，可以做型別的檢查，可以避免初始化時傳入不適合的值。

<br/>

### 設定 write-write 的 property

getter 方法拋出 AttributeError 不給寫入。

```python
# users.py
import hashlib
import os

class User:

    def __init__(self, name, password):
        self.name = name
        self.password = password

    @property
    def password(self):
        raise AttributeError("Password is write-only")

    @password.setter
    def password(self, plaintext):
        salt = os.urandom(32)
        self._hashed_password = hashlib.pbkdf2_hmac(
            "sha256", plaintext.encode("utf-8"), salt, 100_000
        )
```

<br/>

### 暫存計算後的 Attributes

property ( ) 適合用於 lazy 或是計算後的 property，但如果是經常要讀取的，則可以將值先存起來。有的時候我們會需要存取經常被計算後的值。

```python
from time import sleep

class Circle:
    def __init__(self, radius):
        self.radius = radius
        self._diameter = None

    @property
    def diameter(self):
        if self._diameter is None:
            sleep(5)  # 模擬一個費時的計算
            self._diameter = self.radius * 2
        return self._diameter
```

這裡將值暫存到 _diameter，但是上述程式如果變更 radius 的值，_diameter 的值不會連動，property 會回傳錯誤的 _diameter。重新改寫如下...

```python
# circle.py

from time import sleep

class Circle:

    def __init__(self, radius):
        self.radius = radius

    @property
    def radius(self):
        return self._radius

    @radius.setter
    def radius(self, value):
        self._diameter = None # 變更 radius 時重置 diameter
        self._radius = value

    @property
    def diameter(self):
        if self._diameter is None:
            sleep(0.5)  # 模擬一個費時的計算
            self._diameter = self._radius * 2
        return self._diameter
```

修改成每次呼叫 setter 的時侯，重設 _diameter 就 OK 了。

<br/>

### functools.cached_property ( )

假設一個 property 的值需要大量的計算時間，且每次回傳的值都相同，我們可以考慮使用 functools.cached_property 來暫存，cached_property 與 property 不同，cached_property 的值只會計算一次，並將計算後的結果寫入 instance dictionary 中。

當之後要存取此屬性時，會檢查 instance dictionary 是否已有暫存，有的話就回傳且不執行 cached_property，但當 instance dictionary 不存在此屬性時( 可能是第一次執行 cached_property，或已經執行過 cached_property 但從 instance dictionary 中被刪除)，才會再次執行 cached_property。

cached_property 是可以修改的 ( 修改暫存於 instance dictionary 的屬性)，而 property 除非有定義 setter，否則是無法修改的。


```python
# circle.py
from functools import cached_property
from time import sleep

class Circle:

    def __init__(self, radius):
        self.radius = radius

    @cached_property
    def diameter(self):
        sleep(5)  # 模擬一個費時的計算
        return self.radius * 2

c = Circle(5)
c.__dict__
# {'radius': 5}

c.diameter 
# 10

c.__dict__
# {'radius': 5, 'diameter': 10}
# instance dict 多了 diameter 這個屬性

c.diameter 
# 暫存了
# 10

c.diameter = 200
# 可以變更暫存的值
```

{:.note}
使用 @cached_property 可以實現一個可暫存的 property，但此 property 可能會被變更，只要變更 instance dictionary 的值即可。 

<br/>

### functools.cached

上述 diameter 的值是可以變動的，如果要有一個不會被變更的 cached property，可以使用 @functools.cache，建立一個的 wrapper 在 dictionary lookup 上，@cache 不一定要搭配 @property 使用。若是有 function 有參數傳入搭配 @cache，則呼叫 function 時傳入已經傳過的參數則可以立刻回傳暫存值。我們從以下範例可以看到當設定 c.diameter = 200 會有錯誤。

```python
# calculate.py
from functools import cache

class Circle:

    def __init__(self, radius):
        self.radius = radius

    @property
    @cache
    def diameter(self):
        sleep(5) # 模擬一個費時的計算
        return self.radius * 2

c = Circle(5)

c.__dict__
# {'radius': 5}

c.diameter 
# 10

c.__dict__
# {'radius': 5}
# 與 cached_property 不同，instance dict 沒有 diameter 

c.diameter 
# 與 cached_property 相同，提供暫存值
# 10

c.diameter = 200
# AttributeError: can't set attribute 'diameter'
```

{:.note}
使用 @property @cache 的組合可以實現一個不會被變更的 property

<br/>

### 使用 % 做 String Intepolation

在介紹 logging 之前，先介紹使用 % 做 string interpolation

##### %s

%s 表示一個放 string 的佔位符號

```python
'%s was smaller than %s' % ('one', 'two')
# one was smaller than two
```

##### %f

%f 表示一個放 float 的佔位符號，可以使用 %.{n}f 顯示小數點後 n 位。

```python
'number is %.2f' % (79.521452)
# number is79.52
```

##### %c

%c 表示一個放單一 character 的佔位符號

```python
'My math got %c' % ('A')
# My math got A

'My math got %c' % ('AA')
# TypeError: %c requires int or char
```

##### %i %d

%i / %d 表示一個放 signed decimal integer 的佔位符號

```python
'It"s year %i' % (-2024)
# It"s year -2024
```

##### %u

%u 表示一個放 unsigned decimal integer 的佔位符號

```python
'It"s year %u' % (-2024)
# It"s year 2024
```

##### %o

%o 表示一個顯示為八進位的佔位符號

```python
'%i octal is %o' % (256, 256)
# 256 octal is 400
```

##### %x

%x 表示一個顯示為小寫十六進位的佔位符號

```python
'%i hex is %x' % (12, 12)
'12 hex is c'
```

##### %X

%X 表示一個顯示為大寫十六進位的佔位符號

```python
'%i hex is %X' % (12, 12)
'12 hex is C'
```

<br/>

### Logging

在我們有了 string interpolation 的知識後，如果我們要紀錄屬性的變化，我們可以搭配內建模組 logging 與 property ( ) 如下。

```python
# circle.py
import logging

logging.basicConfig(
    format="%(asctime)s: %(message)s",
    level=logging.INFO,
    datefmt="%H:%M:%S"
)

class Circle:
    def __init__(self, radius):
        self._msg = '"radius" was %s. Current value: %s'
        self.radius = radius

    @property
    def radius(self):
        """The radius property."""
        logging.info(self._msg % ("accessed", str(self._radius)))
        return self._radius

    @radius.setter
    def radius(self, value):
        try:
            self._radius = float(value)
            logging.info(self._msg % ("mutated", str(self._radius)))
        except ValueError:
            logging.info('validation error while mutating "radius"')
```

<br/>

### 刪除 managed attribute

以下是一個樹的結構，搭配刪除方法

```python
# tree.py
class TreeNode:
    def __init__(self, data):
        self._data = data
        self._children = []

    @property
    def children(self):
        return self._children

    @children.setter
    def children(self, value):
        if isinstance(value, list):
            self._children = value
        else:
            del self.children
            self._children.append(value)

    @children.deleter
    def children(self):
        self._children.clear()

    def __repr__(self):
        return f'{self.__class__.__name__}("{self._data}")'
```

<br/>

### 覆寫父類別的 property

若是需要覆寫父類別的 property，如 Employee 覆寫了 People 的 name，但是沒覆寫 setter 方法，則子類別將無法設定 property 的值。

```python
# persons.py
class Person:
    def __init__(self, name):
        self._name = name

    @property
    def name(self):
        return self._name

    @name.setter
    def name(self, value):
        self._name = value

    # Person implementation...

class Employee(Person):
    @property
    def name(self):
        return super().name.upper()

person = Person("John")
person.name
# 'John'

employee = Employee("John")
employee.name
# 'JOHN'

employee.name = "John Doe"
# AttributeError: can't set attribute 'name'
# 無法寫入值
```

<br/>

### 用 Python 模擬 property ( )

```python
class Property:
    "模擬 PyProperty_Type() in Objects/descrobject.c"

    def __init__(self, fget=None, fset=None, fdel=None, doc=None):
        self.fget = fget
        self.fset = fset
        self.fdel = fdel
        if doc is None and fget is not None:
            doc = fget.__doc__
        self.__doc__ = doc
        self._name = ''

    def __set_name__(self, owner, name):
        self._name = name

    def __get__(self, obj, objtype=None):
        if obj is None:
            return self
        if self.fget is None:
            raise AttributeError(f'unreadable attribute {self._name}')
        return self.fget(obj)

    def __set__(self, obj, value):
        if self.fset is None:
            raise AttributeError(f"can't set attribute {self._name}")
        self.fset(obj, value)

    def __delete__(self, obj):
        if self.fdel is None:
            raise AttributeError(f"can't delete attribute {self._name}")
        self.fdel(obj)

    def getter(self, fget):
        prop = type(self)(fget, self.fset, self.fdel, self.__doc__)
        prop._name = self._name
        return prop

    def setter(self, fset):
        prop = type(self)(self.fget, fset, self.fdel, self.__doc__)
        prop._name = self._name
        return prop

    def deleter(self, fdel):
        prop = type(self)(self.fget, self.fset, fdel, self.__doc__)
        prop._name = self._name
        return prop

```

<br/>

### 總結

property 是一個特殊的 class attribute，提供的功能介於一般 attribute 與 method 之間。讓我們可以在不破壞公開 API 的情況下去修改 instance attribute 的實作方式。

property 讓我們可以不需要使用 ( ) 來用 method 的方式去呼叫 .radius ( )，取而代之的是我們可以像是存取一般 attribute 的方式存取 .radius，這也是 property 主要的使用方式。它讓我們可以將 method 看待成 attribute，而程式會自己呼叫底下對應的 method。

{:.note}
若是需要修改既有供外部 API 呼叫的 attribute 時，可以將 attribute 轉為 property 無痛轉換。

{:.note}
通常來說，如果不須做特別處理的話，不要將 attribute 轉為 property，不然程式會變得冗長。

<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
