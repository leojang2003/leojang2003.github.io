---
layout: post
title: dir()
subtitle: Python
tags: []
comments: true
---

### object . \_\_dict__

根據官網定義，\_\_dict__ 是 dict 或 mapping object 用來儲存一個物件的屬性。A dictionary or other mapping object used to store an object's (writable) attribute。

{:.note}
物件的 \_\_dict__ 是 dict 型別，物件的 \_\_dict__ 是可寫入的，類別的 \_\_dict__ 是 mappingproxy，mappingproxy 就是一個沒有 \_\_setattr__ 的 dict，因此類別的 \_\_dict__ 是無法寫入的。 

```python

from types import MappingProxyType
d = {'key' : 'value'}
m = MappingProxyType(d)

type(m)
# <class 'mappingproxy'>

m['key'] = 'new'
# Traceback (most recent call last):
#   File "<stdin>", line 1, in <module>
# TypeError: 'mappingproxy' object does not support item assignment

```

### dir ( ) 方法

{:.note}
dir ( ) 的用途在使用互動命令提示字元時提供必要資訊，並非完整的 names 清單，不同的 python release 呼叫 dir ( ) 可能會顯示不同的結果。

根據官網定義，當沒有傳入參數時，會回傳目前<mark><b> Local Scope </b></mark>的 <mark><b>name</b></mark> 清單。當有傳入參數時，會回傳該物件有效的 attribute

另外，如果物件有定義 \_\_dir__ ( ) 方法，則呼叫 dir ( 物件 ) 時，會呼叫物件自己定義的 \_\_dir__ ( ) 方法。dir ( 物件 ) 會回傳物件的 attribute，包含 \_\_dict__ 中的 attribute。

如果 object 沒有定義 \_\_dir__ ( ) 方法，則 dir ( ) 會試著從 object 的 \_\_dict__ 屬性（如果有定義）和其 type object 收集資訊。生成的 list 不一定完整，當 object 有自己定義的 getattr ( ) 方法時，可能會不準確。

```python

### 檔案 mod1.py

''' Module1 Content '''

my_var : str = '' # annotation 寫法

def my_func(name : str):    # 
    print(name)
        
class class1():

    var1 = ''
    var2 = 'Mike Williams'
    var3 = '1982-08-21'
        
    def __getattribute__(self, name):
        print('__getattribute__')
        if(name in ['var3']):
            return name + ' altered'
        else:
            return object.__getattribute__(self, name)
    
class class2(class1):

    var1 : str = ''
    var2 : str = 'Mike Williams Jr'
    var3 : str = '2012-08-21'pl4gc

```

呼叫 dir ( class1 ) 結果如下，因為 class1 沒有定義 \_\_dir__ 方法，所以呼叫 dir ( class1 ) 會試著從物件的 \_\_dict__ 屬性，也就是 class1.\_\_dict__ 和其 type object 收集資訊 ，也就是 object.\_\_dict__。

假設我們在互動命令提示字元 import 這個 module1 後，dir ( module1 ) 得到結果如下

```python

# from pprint import pprint
import module1
dir(module1)

['__annotations__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'class1', 'class2', 'my_func', 'my_var']

```

dir ( module1 ) 與 module1.\_\_dict__ 的內容一致

```python

sorted(module1.__dict__.keys())

['__annotations__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'class1', 'class2', 'my_func', 'my_var']

```

<br/>

- {: .arrow} \_\_annotations__ 因為 my_var 有設定 annotation，不然就不會顯示 \_\_annotations__
- {: .arrow} \_\_cached__ 顯示暫存檔位置 'D:\\Python\\_ _pycache_ _\\module1.cpython-310.pyc'
- {: .arrow} \_\_doc__ 顯示 docstring ' Module1 Content '
- {: .arrow} \_\_file__ 顯示匯入模組的位置 'D:\\Python\\module1.py'
- {: .arrow} \_\_loader__ 回傳 loader 物件，這物件使用 load_module() 將 module 載入到記憶體中。
- {: .arrow} \_\_name__ 顯示 module 的 name，若是 package 內的 module 會包含路徑。
- {: .arrow} \_\_package__ 顯示檔案所在 package 的 name。


{:.note}
注意 dir ( ) 回傳的是 '目前' 的 local scope，呼叫 dir ( ) 的位置會決定回傳回來是哪種 scope

<br/>

### dir ( ) 回傳 global scope / built-in scope

```python
# mod1.py 檔案 

name = 'John'
age = 20

print('mod1 starts ....')
print(dir())
print('mod1 ends ....')

def run():
	print('mod1')

```

我們產生一個檔案 sample.py 如下
```python
# sample.py 檔案

import mod1

# 執行 sample.py 結果如下 ...
# mod1 starts ....
# ['__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'age', 'name']
# mod1 ends ....
```

{:.note}
這裡可以看到可以執行 sample.py 時，import mod1 會呼叫 dir()，其中的 \_\_builtins__ 是一個 dict(用法變成 \_\_builtins__['abs'](-100))，值得注意的是，如果是在 \_\_main__ 中呼叫 dir() 則，這裡的 \_\_builtins__ 變成了一個名為 builtins 的 module(\_\_builtins__.abs(-100))。
                                                                          
{:.note}
根據 Python Doc，多數 modules 都有名為 \_\_builtins__ 在 global scope 中，\_\_builtins__ 的值通常為 builtins 模組，或是該模組的 \_\_dict__ 的值，這兩者的差異僅為 Python 的實作細節。

```python
# 檔案 sample.py

print(__builtins__)

# 執行 sample.py 結果如下 ...
<module 'builtins' (built-in)> 	# 可以看到 __builtins__ 是個 module
print(__builtins__.abs(-10)) 	# 可以呼叫 module 的方法
```

<br/>

### dir ( ) 回傳 function scope / enclosing scope

執行以下程式

```python
def father(father_name):
	
	father_desc = f'father is {father_name}'
	print('outer scope names ... ', dir())

	def son(son_name):
		nonlocal father_desc		
		son_desc = f'son is {son_name}'		
		print('inner scope names ... ', dir())
		
	son('Harry')

father('James')

# outer scope names ...  ['father_desc', 'father_name']
# inner scope names ...  ['father_desc', 'son_desc', 'son_name']
```

這裡可以看到在 son() 裡面呼叫 dir()，傳回的是 son() 的 local scope (這裡因為我們有加入 nonlocal 變數 father_desc，所以會回傳 3 個 name，若沒有設定 nonlocal 則僅回回傳 ['son_desc', 'son_name'] )

<br/>

### 呼叫 dir ( ) 時傳入物件

```python
# 檔案 mod3.py ...

class Mod3:
		
	def __init__(self):		
		pass
		
def run():
	print('mod3')
	
# 檔案 sample.py ...
from mod3 import Mod3
obj = Mod3()
print(dir(obj)) 
#['__class__', '__delattr__', '__dict__', ... , '__subclasshook__', '__weakref__']
```

<br/>

### 呼叫 dir ( ) 時傳入物件，但物件有自訂的 \_\_dir__ ( )

```python
# 檔案 mod3.py ...
class Mod3:
		
	def __init__(self):		
		pass
	
	# 客製化 __dir__()
	def __dir__(self):
		return ['a','b','c']
		
def run():
	print('mod3')
	
# 檔案 sample.py ...
from mod3 import Mod3

obj = Mod3()
print(dir(obj)) # ['a', 'b', 'c']
```

{:.note}
傳入不同類型物件，dir()會顯示的內容也不一樣

<br/>

### 傳入 module 物件

dir() 回傳模組的 attributes 的 names

```python
# 檔案 mod1.py ...

name = 'John'
age = 20

def run():
	print('mod1')
	
# 檔案 sample.py ...

import mod1
print(dir(mod1))
['__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'age', 'name', 'run']
```

### 傳入 type 或 class 物件
dir() 回傳模組的 attributes 的 names，包含父類別的 attributes names

```python
# 檔案 mod2.py ...
class Mod2():
	
	def __init__(self):		
		pass
		
	def run_mod2():
		print('mod2')

# 檔案 mod3.py ...
import mod2

# 繼承 Mod2
class Mod3(mod2.Mod2):
	
	def __init__(self):		
		pass
		
	def run_mod3():
		print('mod3')
	
# 檔案 sample.py ...	
import mod3

obj = mod3.Mod3()
print(dir(obj))
# ['__class__', '__delattr__',... '__weakref__', 'run_mod2', 'run_mod3']
# 父類別 Mod2 的方法 run_mod2 也回傳了
```
<br/>
<br/>
<br/>
