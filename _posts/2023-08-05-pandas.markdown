---
layout: post
title: pandas - DataFrame
subtitle: 
tags: [pandas, DataFrame]
comments: true
---

### 官方文件的 DataFrame 方法定義

{: .box-note}
class pandas.DataFrame(data=None, index=None, columns=None, dtype=None, copy=None)   
 
二維、大小可變、可能不同類型的表格資料。  

資料結構還包含有標籤的軸 (axis)（行和列）。算術運算對齊於行和列標籤。可以想成一個內含 Series 物件的類似字典的容器。這是 pandas 的主要資料結構。  

**參數說明**

**data** : ndarray（結構化或同質的）、可迭代物件、字典或 DataFrame。  

字典可以包含 Series、陣列、常數、資料類別 (dataclass) 或類似 list 的物件。如果資料是一個字典，則 column 順序遵循插入順序。如果字典包含有定義 index 的 Series，則會按照 index 對齊。如果資料本身是 Series 或 DataFrame，也會進行這種對齊。對齊適用於 Series/ DataFrame 輸入。

如果資料是包含 dict 的 list ，則 column 的順序遵循插入順序。    

**index** : 索引或類似陣列的物件  

用於生成 DataFrame 的索引。如果輸入資料本身沒有索引資訊，且此參數 index 也沒設定，則預設使用 RangeIndex。  

**columns** : 索引或類似陣列的物件  

當資料本身沒有欄標籤時，用於生成 DataFrame 的欄標籤，預設為 RangeIndex（0、1、2、...、n）。如果資料包含欄標籤，則會執行欄選擇(?)。

**dtype** : dtype，預設為 None。  

要強制使用的資料型別。只允許一個單一的 dtype。如果為 None，則進行推斷。  

**copy** : bool 或 None，預設為 None  

從輸入中複製資料。對於字典資料，預設的 None 行為類似於 copy=True。對於 DataFrame 或 2D ndarray 輸入，預設的 None 行為類似於 copy=False。如果資料是一個包含一個或多個 Series（可能具有不同 dtype）的字典，copy=False 將確保這些輸入不被複製。  

**其他方法**
 
DataFrame.from_records：從 tuple s或 record arrays 建立的建構函式。<br class="new">
DataFrame.from_dict：從 Series、陣列或字典的字典建立的函式。<br class="new">
read_csv：將逗號分隔值（csv）文件讀取為 DataFrame。<br class="new">
read_table：將通用分隔文件讀取為 DataFrame。<br class="new">

<br/>

### 使用字典建立 DataFrame

**使用字典建立 DataFrame，字典的值是純量**

這沒意義，單純測試用

```python
import pandas as pd
import numpy as np
dict = {"col":'a', "col2":'c'}

s1 = pd.DataFrame(dict1)

# 建立失敗錯誤如下，看來純量必須要給 index 參數
# If using all scalar values, you must pass an index

df = pd.DataFrame(dict, index=['row'])
#     col col2
# row   a    c
```

如果多設幾個 index，資料就會複製如下，看起來是指有一列資料才能自我複製

```python
df = pd.DataFrame(dict, index=['row', 'row2', 'row3'])
#      col col2
# row    a    c
# row2   a    c
# row3   a    c
```

如果使用字典建立 DataFrame，預設的 column 會是字典的 keys，如果使用參數 columns 則它的值必須要對應到原本字典的 keys，不然會抓不到 columns，舉例如下。

```python
df = pd.DataFrame(dict, index=['row', 'row2', 'row3'], columns=['q'])
#         q
# row   NaN
# row2  NaN
# row3  NaN

df = pd.DataFrame(dict, index=['row', 'row2', 'row3'], columns=['col2'])
#      col2
# row     c
# row2    c
# row3    c
```

**使用字典建立 DataFrame，字典的值是 list**

```python
dict = {"col":['a', 'b'], "col2":['c', 'd']}

df = pd.DataFrame(dict)
#   col col2
# 0   a    c
# 1   b    d
```

我們可以看到字典的 key 變成了 DataFrame 的行標籤了

**加入 index 參數時，長度必須相同**

```python
df = pd.DataFrame(dict, index=['row1', 'row2', 'row3'])

# ValueError: Length of values (2) does not match length of index (3)

df = pd.DataFrame(dict, index=['row1'])

# ValueError: Length of values (1) does not match length of index (3)

df = pd.DataFrame(dict, index=['row1', 'row2'])
#      col col2
# row1   a    c
# row2   b    d
```

{: .note}
如果資料來源是 list，index 參數的用途像是重新命名 row 的標籤，不一定要與原本 list 的 RangeIndex 一樣。但長度必須與 row 數一致。

就算我們設定 index=[1, 0]，原本猜想第0行跟第1行的內容會互換，但資料的內容還是維持一樣沒有互換。

{: .note}
如果資料來源是 list，調動 index 的值無法變更 DataFrame 的內容。

```python
df = pd.DataFrame(dict, index=[1, 0])
#   col col2
# 1   a    c
# 0   b    d
```

下面同樣可以到，如果資料是字典，使用 columns 參數時值必須要等於 key 才能選擇

```
df = pd.DataFrame(dict, index=['row1', 'row2'], columns=['col'])
#      col
# row1   a
# row2   b

df = pd.DataFrame(dict, index=['row1', 'row2'], columns=['X'])
#      	 X
# row1 NaN
# row2 NaN
```

**使用字典建立 DataFrame，字典的值是 list 長度不同時**

用 1,1,3 個元素的字典可以建立 DataFrame

```python
d =  {'a':'a1', 'b':'b1', 'c':['c1', 'c2', 'c3']}

df = pd.DataFrame(d)
#      		 a        b       c
#    0       a1      b2      c1
#    1       a1      b2      c2
#    2       a1      b2      c3
```

長度不一會自動補齊，前提是只能同時有 1 或 N 個元素。  

當我們用包含 2,1,3 個元素的字典時，就無法建立 DataFrame，出現 ValueError 

```python
d =  {'a':['a1', 'a2], 'b':'b1', 'c':['c1', 'c2', 'c3']}
df = pd.DataFrame(d)
# ValueError: All arrays must be of the same length
```

**使用字典建立 DataFrame，字典的值是 Series**

```python
s1 = pd.Series([1, 2, 3])
s2 = pd.Series([4, 5, 6])

dict = {"col":s1, "col2":s2}

df = pd.DataFrame(dict)
#    col  col2
# 0    1     4
# 1    2     5
# 2    3     6
```

如果使用 index，則 index 必須與 Series 的 index 吻合

```python
df = pd.DataFrame(dict, index=['a', 'b', 'c'])
#    col  col2
# a  NaN   NaN
# b  NaN   NaN
# c  NaN   NaN
```

index 必須與 Series 的 index 吻合，才能取得資料

```python
df = pd.DataFrame(dict, index=[0, 1, 2])
#    col  col2
# 0    1     4
# 1    2     5
# 2    3     6
```

index 順序可以換時，列的順序也隨 index 不同而改變了，與 list 不同，這裡的 index 變成一種 *selector* 了

```python
df = pd.DataFrame(dict, index=[0, 2, 1])
#    col  col2
# 0    1     4
# 2    3     6
# 1    2     5
```

因為變成類似 selector，所以 index 可以重複選取

```python
df = pd.DataFrame(dict, index=[2, 2, 2])
#    col  col2
# 2    3     6
# 2    3     6
# 2    3     6
```

搭配 columns

```python
df = pd.DataFrame(dict, index=[0, 1, 2], columns=['col'])
#    col
# 0    1
# 1    2
# 2    3

df = pd.DataFrame(dict, index=[0, 1, 2], columns=['col', 'col', 'col'])
#    col  col  col
# 0    1    1    1
# 1    2    2    2
# 2    3    3    3

df = pd.DataFrame(dict, index=[0, 1, 2], columns=['X'])
#      X
# 0  NaN
# 1  NaN
# 2  NaN
```

**使用字典建立 DataFrame，字典的值是 Series，部分 Series 有 index**

```python
s1 = pd.Series([1, 2, 3], index=['s1', 's2', 's3'])
s2 = pd.Series([4, 5, 6])

dict = {"col":s1, "col2":s2}

df = pd.DataFrame(dict)
#     col  col2
# s1  1.0   NaN
# s2  2.0   NaN
# s3  3.0   NaN
# 0   NaN   4.0
# 1   NaN   5.0
# 2   NaN   6.0
```

可以看到因為 s1 與 s2 的 index 不同，所以被合成 6 列的 dataframe，其他補上 NaN。  

如果使用 index，則 index 必須與 Series 的 index 吻合

```python
df = pd.DataFrame(dict, index=['s1', 's2', 's3'])
#     col  col2
# s1    1   NaN
# s2    2   NaN
# s3    3   NaN

df = pd.DataFrame(dict, index=[0, 1, 2])
#    col  col2
# 0  NaN     4
# 1  NaN     5
# 2  NaN     6
```

index 順序可以換

```python
df = pd.DataFrame(dict, index=[0, 's2', 1])
#     col  col2
# 0   NaN   4.0
# s2  2.0   NaN
# 1   NaN   5.0
```

index 可以重複

```python
df = pd.DataFrame(dict, index=['s3', 's3', 's3'])
#     col  col2
# s3    3   NaN
# s3    3   NaN
# s3    3   NaN
```

**使用字典建立 DataFrame，字典的值是 Series (長度不一樣)**

```python
s1 = pd.Series([1, 2])
s2 = pd.Series([4, 5, 6])

dict = {"col":s1, "col2":s2}

df = pd.DataFrame(dict)
#    col  col2
# 0  1.0     4
# 1  2.0     5
# 2  NaN     6
```

Series 長度不一會自動補上 NaN

```python
# 加入 index

df = pd.DataFrame(dict, index=[0])
#    col  col2
# 0    1     4

df = pd.DataFrame(dict, index=[0, 1])
#    col  col2
# 0    1     4
# 1    2     5

df = pd.DataFrame(dict, index=[0, 1, 2])
#    col  col2
# 0  1.0     4
# 1  2.0     5
# 2  NaN     6

df = pd.DataFrame(dict, index=[0, 1, 2, 3])
#    col  col2
# 0  1.0   4.0
# 1  2.0   5.0
# 2  NaN   6.0
# 3  NaN   NaN
```

{: .note} 
如果資料來源是 Series，index 參數的用途像是 row 的 selector，index 參數需要與原先 Series 定義的 index 一樣，才能選到該 row。不像 list，index 參數長度不須與 row 數一致。

**使用字典建立 DataFrame，字典的值混合 Series 與 list**

```python
s = pd.Series([1, 2, 3], index=['a', 'b', 'c'] )
l = [4,5,6]

dict = {"col":s, "col2":l}

df = pd.DataFrame(dict)
#    col  col2
# a    1     4
# b    2     5
# c    3     6
```

如果有 Series 有定義 index 的話，row labels 都會是 Series 的 index，如下

```python
s = pd.Series([1, 2, 3], index=['a', 'b', 'c'] )
l = [4,5,6]

dict = {"col":l, "col2":s} # 顛倒過來

df = pd.DataFrame(dict)
#    col  col2
# a    4     1
# b    5     2
# c    6     3
```

**使用 index**

```python
df = pd.DataFrame(dict, index=[0])

# 錯誤
# ValueError: Length of values (3) does not match length of index (1)

df = pd.DataFrame(dict, index=['a', 'b', 'c'])
#    col  col2
# a    1     4
# b    2     5
# c    3     6
```

index 必須要是剛好長度 3 才行，應該與資料包含 list 有關。


**無法建立 DataFrame，資料來源是包含 DataFrame 的字典**

```python
df1 = pd.DataFrame({"col":[1, 2], "col2":[3, 4]})
df2 = pd.DataFrame({"col":[5, 6], "col2":[7, 8]})
df3 = pd.DataFrame({"a":df1, "b":df2}, index=["X"])

# 錯誤
# ValueError: Data must be 1-dimensional
```

**使用字典建立 DataFrame，字典的值是 ndarray**

```python
import numpy as np
r1 = np.array([1,2])
r2 = np.array([3,4])

df = pd.DataFrame({"a":r1, "b":r2})
#    a  b
# 0  1  3
# 1  2  4

# 使用 index

df = pd.DataFrame({"a":r1, "b":r2}, index=["X", "Y"])
#    a  b
# X  1  3
# Y  2  4

df = pd.DataFrame({"a":r1, "b":r2}, index=[1, 0])
#    a  b
# 1  1  3
# 0  2  4
```

{: .note}
如同 list，如果資料來源是 ndarray，index 參數的用途像是重新命名 row 的標籤，不一定要與原本 ndarray 的 RangeIndex 一樣。但長度必須與 row 數一致。

如同 list，就算我們設定 index=[1,  0]，原本猜想第0行跟第1行的內容會互換，但資料的內容還是維持一樣沒有互換。

{: .note}
如果資料來源是 list\ndarray，改變 index 的值無法變更 DataFrame 的內容。


**使用 list 建立 DataFrame，list 的值是純量**

```python
l = ['a', 'b', 'c']

df = pd.DataFrame(l)
#    0
# 0  a
# 1  b
# 2  c
```

使用 index

```python
df = pd.DataFrame(l, index=['q', 'p', 'o'])
#    0
# q  a
# p  b
# o  c
```

資料是 list，設定 index 只有重新命名列標籤用，index 長度需與資料一致

使用 columns

```python
df = pd.DataFrame(l, index=['q', 'p', 'o'], columns=['x'])
#    x
# q  a
# p  b
# o  c
```

如果資料是 list/ndarray，columns 設定會變更 column label 的值，columns 的值也要剛好等於資料 column 數。

**使用 list 建立 DataFrame，list 的值是 list**

{: .note}
請注意! 不像字典，value 會變成行，如果是 list，list[0]、list[1] ... 資料是橫著放的

```python
l = [['a', 'b', 'c'], ['d', 'e', 'f']]

df = pd.DataFrame(l)
#    0  1  2
# 0  a  b  c   l[0]
# 1  d  e  f   l[1]
```

使用 index

```python
df = pd.DataFrame(l, index=['X', 'Y'])
#    0  1  2
# X  a  b  c
# Y  d  e  f
```

使用 columns

```python
df = pd.DataFrame(l, index=['X', 'Y'], columns=['A', 'B', 'C'])
#    A  B  C
# X  a  b  c
# Y  d  e  f
```

在 list 上使用 columns 效果等同重新命名欄標籤的值。

**使用 list 建立 DataFrame，list 的值是 list，list 的長度不一樣**

```python
l = [['a', 'b', 'c'],['d', 'e']]

df = pd.DataFrame(l)
#    0  1     2
# 0  a  b     c
# 1  d  e  None
```

使用 index

```python
df = pd.DataFrame(l, index=['X', 'Y'])
#    0  1     2
# X  a  b     c
# Y  d  e  None
```

使用 columns

```python
df = pd.DataFrame(l, index=['X', 'Y'], columns=['A', 'B', 'C'])
#    A  B     C
# X  a  b     c
# Y  d  e  None
```

**使用 list 建立 DataFrame，list 的值是 Series**

```python
s1 = pd.Series(['a', 'b', 'c'])
s2 = pd.Series(['d', 'e', 'f'])

l = [s1, s2]

df = pd.DataFrame(l)
#    0  1  2
# 0  a  b  c
# 1  d  e  f
```

使用 index

```python
df = pd.DataFrame(l, index=['X', 'Y'])
#    0  1  2
# X  a  b  c
# Y  d  e  f
```

雖然 list 的值是 Series，但 index 變成同樣只是 rename 的功能而已。

使用 columns

```python
df = pd.DataFrame(l, index=['X', 'Y'], columns=[0,1,2,2,'X'])
#    0  1  2  2    X
# X  a  b  c  c  NaN
# Y  d  e  f  f  NaN
```

**使用 list 建立 DataFrame，list 的值是 Series(有定義index)**

```python
s1 = pd.Series(['a', 'b', 'c'], index=['A', 'B', 'C'])
# A    a
# B    b
# C    c
# dtype: object

s2 = pd.Series(['d', 'e', 'f'])

l = [s1, s2]

df = pd.DataFrame(l)
#      A    B    C    0    1    2
# 0    a    b    c  NaN  NaN  NaN
# 1  NaN  NaN  NaN    d    e    f
```

Series 的 index 變成 DataFrame 的 column 了

<br/>

使用 index

```python
df = pd.DataFrame(l, index=['Q', 'X'])
#      A    B    C    0    1    2
# Q    a    b    c  NaN  NaN  NaN
# X  NaN  NaN  NaN    d    e    f
```

使用 columns

```python
df = pd.DataFrame(l, index=['Q', 'X'], columns=['A', 2])
#      A     2
# Q    a   NaN
# X  NaN     f
```

**使用 list 建立 DataFrame，list 的值是 Series 的長度不一樣**

```python
s1 = pd.Series(['a', 'b', 'c'])
s2 = pd.Series(['d', 'e'])

l = [s1, s2]

df = pd.DataFrame(l)
#    0  1    2
# 0  a  b    c
# 1  d  e  NaN
```

使用 index

```python
df = pd.DataFrame(l, index=[0, 1])
#    0  1    2
# 0  a  b    c
# 1  d  e  NaN

df = pd.DataFrame(l, index=['X', 'Y'])
#    0  1    2
# X  a  b    c
# Y  d  e  NaN
```

如果值是 list\ndarray，那麼 index 的長度就一定要剛好，參數 index 在值是 list\ndarray 時不會改變 DataFrame 的內容

**使用 list 建立 DataFrame，list 的值是 ndarray**

```python
import numpy as np
r1 = np.array([1, 2])
r2 = np.array([3, 4])

df = pd.DataFrame([r1, r2])
#    0  1
# 0  1  2
# 1  3  4
```

使用 index

```python
df = pd.DataFrame([r1, r2], index=['X', 'Y'])
#    0  1
# X  1  2
# Y  3  4
```

**使用 DataFrame 建立 DataFrame**

```python
df = pd.DataFrame([[1, 2, 3], [4, 5, 6]])
df2 = pd.DataFrame(df)

print(df)
#    0  1  2
# 0  1  2  3
# 1  4  5  6
```

使用參數 index

```python
df2 = pd.DataFrame(df, index=[0])
#    0  1  2
# 0  1  2  3

df2 = pd.DataFrame(df, index=[1])
#    0  1  2
# 1  4  5  6

df2 = pd.DataFrame(df, index=['x'])
#     0	  1   2
# x NaN NaN NaN
```

### 從資料類別（dataclass）建構 DataFrame：

```python
from dataclasses import make_dataclass
Point = make_dataclass("Point", [("x", int), ("y", int)])
pd.DataFrame([Point(0, 0), Point(0, 3), Point(2, 3)])
    x  y
 0  0  0
 1  0  3
 2  2  3
```

<br/>

### DataFrame 參數 dtype

為了強制使用單一的 dtype：

```python
df = pd.DataFrame(data=d, dtype=np.int8)
df.dtypes
#  col1    int8
#  col2    int8
#  dtype: object
```
<br/>

### DataFrame 的方法

```python
dict = {'apple':['a1', 'a2', 'a3'], 'banana':['b1','b2','b3'], 'cherry':['c1','c2','c3'], 'dumplin':['d1','d2','d3']}
df = pd.DataFrame(data=dict)

#   apple banana cherry dumplin
# 0    a1     b1     c1      d1
# 1    a2     b2     c2      d2
# 2    a3     b3     c3      d3
```

**shape()**

```python
df.shape # (3, 4)
# 3 rows, 4 columns
```

**head(i)**

```python
df.head(1)
#   apple banana cherry dumplin
# 0    a1     b1     c1      d1
```

**tail(i)**

```python
df.tail(1)
#   apple banana cherry dumplin
# 2    a3     b3     c3      d3
```

**copy()**

```python
# 複製一個 DataFrame
df2 = df.copy()
```

**set_index()**

```python
df2.set_index('apple', inplace=True)
#       banana cherry dumplin
# apple                      
# a1        b1     c1      d1
# a2        b2     c2      d2
# a3        b3     c3      d3

df2.shape # (3, 3)
# 設完 index 後少了一行行

df2.head(1)
#       banana cherry dumplin
# apple                      
# a1        b1     c1      d1
```

**index()**

```python
df2.index = pd.Index(['q1','q2','q3'], dtype='object', name='xxx')
#     banana cherry dumplin
# xxx                      
# q1      b1     c1      d1
# q2      b2     c2      d2
# q3      b3     c3      d3
```

**DataFrame.reset_index()**

會將 index 再變成 RangeIndex

```python
df3 = df2.reset_index()
#   xxx banana cherry dumplin
# 0  q1     b1     c1      d1
# 1  q2     b2     c2      d2
# 2  q3     b3     c3      d3
```

**loc()**

取得 index = 'XXX' 的列

```python
dict = {'apple':['a1', 'a2', 'a3'], 'banana':['b1','b2','b3'], 'cherry':['c1','c2','c3'], 'dumplin':['d1','d2','d3']}
df = pd.DataFrame(data=dict, index=['r1', 'r2', 'r3'])
#    apple banana cherry dumplin
# r1    a1     b1     c1      d1
# r2    a2     b2     c2      d2
# r3    a3     b3     c3      d3

df.loc['r2']
# apple      a2
# banana     b2
# cherry     c2
# dumplin    d2
# Name: r2, dtype: object
```

**iloc 取得第 i 列**

```python
df.iloc[2]
# apple      a3
# banana     b3
# cherry     c3
# dumplin    d3
# Name: r3, dtype: object
```

**使用 slicing 取得列**

```python
df[2:]
#    apple banana cherry dumplin
# r3    a3     b3     c3      d3
```

**values[] 或 values[][] 取得某行某列的值**

取得第二行

```python
df.values[1]
# ['a2' 'b2' 'c2' 'd2']

df.values[1][1]
# b2
```

**OR 條件**

```python
dict = {'apple':[60, 30, 100], 'banana':[50,60,70], 'cherry':[30,60,90], 'dumplin':[120,240,360]}
df = pd.DataFrame(data=dict, index=['r1', 'r2', 'r3'])
#     apple  banana  cherry  dumplin
# r1     60      50      30      120
# r2     30      60      60      240
# r3    100      70      90      360

df.loc[(df['apple']>30)|(df['dumplin']>360)]
#     apple  banana  cherry  dumplin
# r1     60      50      30      120
# r3    100      70      90      360
```

**AND 條件**

```python
df.loc[(df['banana']<=60)&(df['cherry']>30)]
#     apple  banana  cherry  dumplin
# r2     30      60      60      240
```

**AND 條件的另一種寫法**

```python
df.loc[df['banana']<=60].loc[df['cherry']>30]
#     apple  banana  cherry  dumplin
# r2     30      60      60      240
```

**concate()**

將 DataFrame 串接起來

```python
dict = {'coke':[60, 30, 100], 'pepsi':[50,60,70]}
df = pd.DataFrame(data=dict)
print(df)
#    coke  pepsi
# 0    60     50
# 1    30     60
# 2   100     70

dict2 = {'apple':[60, 30, 100], 'banana':[50,60,70], 'cherry':[30,60,90]}
df2 = pd.DataFrame(data=dict2, index=['r1', 'r2', 'r3'])
#     apple  banana  cherry
# r1     60      50      30
# r2     30      60      60
# r3    100      70      90

df2 = pd.concat([df,df2])
#      coke  pepsi  apple  banana  cherry
# 0    60.0   50.0    NaN     NaN     NaN
# 1    30.0   60.0    NaN     NaN     NaN
# 2   100.0   70.0    NaN     NaN     NaN
# r1    NaN    NaN   60.0    50.0    30.0
# r2    NaN    NaN   30.0    60.0    60.0
# r3    NaN    NaN  100.0    70.0    90.0
```

**drop() 砍行/列**

{: .box-note}
Definition : drop(labels: 'IndexLabel'=None, *, axis: 'Axis'=0, index: 'IndexLabel'=None, columns: 'IndexLabel'=None, level: 'Level'=None, inplace: 'bool'=False, errors: 'IgnoreRaise'='raise')

**如何 drop 行**

```python
dict = {'apple':[60, 30, 100], 'banana':[50,60,70], 'cherry':[30,60,90]}
df = pd.DataFrame(data=dict, index=['r1', 'r2', 'r3'])
#     apple  banana  cherry
# r1     60      50      30
# r2     30      60      60
# r3    100      70      90

x = df.drop(['banana'], axis=1)
```
axis = 1 表示為行，可以看到 banana 行已經砍掉了，但原始的 DataFrame 不受影響。

```python
x 
#     apple  cherry
# r1     60      30
# r2     30      60
# r3    100      90

# 原始 DataFrame 不受影響

df
#     apple  banana  cherry
# r1     60      50      30
# r2     30      60      60
# r3    100      70      90
```

**如何 drop 列**

axis = 0 表示為行，可以看到 r2 列已經砍掉了，但原始的 DataFrame 不受影響。

```python
y = df.drop(['r2'], axis=0)
#     apple  banana  cherry
# r1     60      50      30
# r3    100      70      90
```

<br/>

**讀取 csv**

```python
pd.read_csv(wkDir+"target.csv")
```

**寫入 csv**

```pthon
ds = pd.read_csv(wkDir+"data_source.csv")
ds.to_excel("new.xlsx")

<br/>
<br/>
<br/>

