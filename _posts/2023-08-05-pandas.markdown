---
layout: post
title: Pandas and Data Analysis
subtitle: 
tags: [pandas, streamlit,beautifulsoup,sklearn,iris]
comments: true
---

```python
Xd2 =  {'customer': 'c3', 'channel': 's2', 'product': ['p1', 'p2', 'p3']}
Xd3 =  {'customer': ['c1', 'c2'], 'channel': 's1', 'product': ['p1', 'p2', 'p3']}
```

<br/>

### 建立 DataFrame

```python
import pandas as pd
##== (1).
df1 = pd.DataFrame([[1,2,3],[4,5,6]])
print("df1=",df1)
# df1=    0  1  2
#      0  1  2  3
#      1  4  5  6

df2 = pd.DataFrame([[1,2,3],[4,5,6]],index=['row1','row2'],columns=['col1','col2','col3'])
print("df2=",df2)
# df2=       col1  col2  col3
#      row1     1     2     3
#      row2     4     5     6
```

<br/>

### 由 dict 建立 DataFrame

用 1,1,3 個元素的 dict 可以建立數據框

```python
Xdf2 = pd.DataFrame(Xd2)
print("Xdf2=",Xdf2)
# Xdf=   customer channel product
#    0       c3      s2      p1
#    1       c3      s2      p2
#    2       c3      s2      p3
```

使用另一個 dict 去生成時發生錯誤，用 2,1,3 個元素的 dict 就不可以建立數據框，出現 ValueError 

```python
Xdf2 = pd.DataFrame(Xd2);
# ValueError: All arrays must be of the same length
```
<br/>

### 最常見的 DataFrame 建立方法

```python
Xdf = pd.DataFrame({"customer": ["c1","c2","c3"], "channel": ["s1","s2","s3"], 
                    "product":["p1","p2","p3"], "quantity": [1,1,2], "amount": [1200,800,3200]});   
print("Xdf = ",Xdf)

# Xdf =    customer channel product  quantity  amount
#        0       c1      s1      p1         1    1200
#        1       c2      s2      p2         1     800
#        2       c3      s3      p3         2    3200
```

<br/>

###  DataFrame 樣貌(shape,head)

```python
print("Xdf.shape =",Xdf.shape)
#-- Xdf.shape = (3, 5) -- (row列數,column行數)

print("Xdf.head(2) =",Xdf.head(2))
#-- 前數行(head)與後數行(tail)

# Xdf.head(2) =   customer channel product  quantity  amount
#               0       c1      s1      p1         1    1200
#               1       c2      s2      p2         1     800
```
### 設定索引

```python
Xdf1 = Xdf.copy();            
Xdf1.set_index("customer" , inplace=True);
print(Xdf1)

#          channel product  quantity  amount
# customer                                  
# c1            s1      p1         1    1200
# c2            s2      p2         1     800
# c3            s3      p3         2    3200
```
將 customer設定 index 後，行數會少 1，我們可以從 shape() 得知。

```python
print("Xdf1.shape =",Xdf1.shape)
#-- Xdf1.shape = (3, 4) -- (row列數,column行數)

print("Xdf1.head(2) =",Xdf1.head(2))
#-- 前數行(head)與後數行(tail)
# Xdf1.head(2) =          channel product  quantity  amount
#               customer                                  
#               c1            s1      p1         1    1200
#               c2            s2      p2         1     800
```
### 重設設定索引

```python
print("Xdf1.index=",Xdf1.index)
#-- Xdf1.index= Index(['c1', 'c2', 'c3'], dtype='object', name='customer')

print("Xdf1.columns=",Xdf1.columns)
#-- Xdf1.columns= Index(['channel', 'product', 'quantity', 'amount'], dtype='object')

Xdf2 = Xdf1.reset_index();
print(Xdf2)
#-- Xdf2 和 Xdf 相同
```

### 提取列

```python
print(Xdf1)
#         channel product  quantity  amount
#customer                                  
#c1            s1      p1         1    1200
#c2            s2      p2         1     800
#c3            s3      p3         2    3200
```
提取 index = c2 的列

```python
print("Xdf1.loc['c2']=",Xdf1.loc['c2'])
#-- (a1)提取指定索引的列 .loc['c2']
```

提取第 i 列

```python
print("Xdf1.iloc[2]=",Xdf1.iloc[2])
#-- (a2)提取第 k(2)列: .iloc[2]
```

提取第 slice 列

```python
print("Xdf1[1:3]=",Xdf1[1:3])
#-- (a3)提取第1:3(1-2)列
```

提取行

```python
print("Xdf1['product']=",Xdf1['product'])
#-- (a)按照列名稱，提取指定的行
```

<br/>

### 提取元素

```python
print("Xdf.values[2]=",Xdf.values[2])         #-- [列] --> ['c3' 's3' 'p3' 2 3200]
print("Xdf.values[2][4]=",Xdf.values[2][4])   #-- [列][行] --> 3200
print("Xdf.values[2][4]=",Xdf.values[2][4])   #-- [列][行] --> 3200
```

### 條件提取

```python
Xdf.loc[Xdf['amount']>3000]

# OR
Xdf.loc[(Xdf['amount']<1000)|(Xdf['quantity']>=2)]

# AND
Xdf.loc[(Xdf['amount']<1000)&(Xdf['quantity']<=1)]

#AND
Xdf.loc[(Xdf['amount']<1000)].loc[(Xdf['quantity']<=1)]
```

<br/>

### DataFrame 增減

```python
df4 = pd.DataFrame({"customer":["c4"], "channel":["s4"], "product":["p4"], "quantity":[3], "amount":[1500]})
Xdf4 = pd.concat([Xdf,df4])   
print("Xdf4 = ",Xdf4)

Xdf4a = Xdf4.drop([0],axis=0);

Xdf4b = Xdf4a.drop(["quantity"],axis=1);
```
<br/>

### 讀取 csv

```python
pd.read_csv(wkDir+"target.csv")
```

### Streamlit

執行 streamlit run main.py

```python
# 檔案 main.py

import os
#==> 任何數據分析編程的第一件事：設定工作目錄(Working Directory)
wkDir = "c:/Users/Admin/Desktop/台新python/";   os.chdir(wkDir)
print(os.getcwd())

# Step1. 讀取 DataFrame
import pandas as pd
target = pd.read_csv(wkDir+"data.csv");

import streamlit as st
st.set_option('deprecation.showPyplotGlobalUse', False)

st.title("台新銀行: 大數據實務網站")      #-- canvas
st.sidebar.title("控制盤")               #-- sidebar

if st.sidebar.checkbox("(1) 擷取交易數據 (-->target)"):    #-- (3A) 由用戶於控制盤勾選後,再進行數據讀取
    print("\n\n>>>>> (1) 擷取交易數據 (-->target) -----")  #-- 偵錯用
    target = pd.read_csv(wkDir+"target.csv")                  ##== (D6) 讀取數據框
    st.sidebar.write("* 交易數據檔 = target.csv")          #-- (3B) 以下為 控制盤(sidebar)設計
    st.sidebar.write("* 交易記錄數 = ", target.shape[0])   
    st.header("(1) 擷取交易數據檔(-->target)")             #-- (3B) 以下為 主畫面(content)設計
    st.write("* 交易記錄數 = ", target.shape[0])  
    st.dataframe(target.head(3))

if st.sidebar.checkbox("(2) 產生交易週時模型"):       #-- (A) 由用戶於控制盤勾選後,再進行數據讀取
    print("\n\n>>>>> (2) 產生交易週時模型 -----")     #-- 偵錯用 
    XXX["hour"] = pd.to_datetime(XXX["datetime"]).dt.hour           ##== (G2-1).(KDD3) 產生週/時標籤 (hour,weekday)
    XXX["weekday"] = pd.to_datetime(XXX["datetime"]).dt.weekday    
    TTT = pd.crosstab( XXX["hour"], XXX["weekday"], margins=True ); print(TTT[0:3])  ##== (G2-2).(KDD4) 建立 交易週時模型 (TTT)
    st.header("(2) 交易週時模型(XXX[hour,weekday])")  #-- (B) 以下為 主畫面(content)設計
    st.write("(2A) (KDD3) 產生的數據標籤-- ")  
    st.dataframe(XXX.head(3))
    st.write("(2B) (KDD4) 交易週時模型-- ")  
    st.dataframe(TTT) 
```
 ### sklearn
 
```pthon
##== sklearn/datasets: 提供了一些數據生成器和數據加載工具, 共有24個數據集
from sklearn import datasets
iris = datasets.load_iris()
print(iris.feature_names)   #-- ['sepal length (cm)', 'sepal width (cm)', 'petal length (cm)', 'petal width (cm)']
print(iris.target_names)    #-- ['setosa' 'versicolor' 'virginica']
print(iris.data.shape)      #-- (150,4)
print(iris.data[0:2,])      #-- [[5.1 3.5 1.4 0.2] [4.9 3.  1.4 0.2]]
```

### 寫入 csv

```pthon
ds = pd.read_csv(wkDir+"data_source.csv")
ds.to_excel("new.xlsx")
```

### opensource 抓資料

```pthon
URL = 'https://tcgbusfs.blob.core.windows.net/blobyoubike/YouBikeTP.json'
response = requests.get(URL)
jsonData = response.json()
data = list(jsonData["retVal"].values());
```
