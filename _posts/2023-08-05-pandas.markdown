---
layout: post
title: pandas - DataFrame
subtitle: 
tags: [pandas, streamlit,beautifulsoup,sklearn,iris]
comments: true
---

### 官方文件的 DataFrame 方法定義

{: .box-note}
class pandas.DataFrame(data=None, index=None, columns=None, dtype=None, copy=None)   
 
二維、大小可變、可能不同類型的表格資料。  

資料結構還包含有標籤的軸 (axis)（行和列）。算術運算對齊於行和列標籤。可以想成一個內含 Series 物件的類似字典的容器。這是 pandas 的主要資料結構。  

**參數說明**

**data** : ndarray（結構化或同質的）、可迭代物件、字典或 DataFrame。  

字典可以包含 Series、陣列、常數、資料類別 (dataclass) 或類似 list 的物件。如果資料是一個字典，則 column 順序遵循插入順序。如果字典包含有定義 index 的 Series，則會按照 index 對齊。如果資料本身是 Series 或 DataFrame，也會進行這種對齊。對齊適用於 Series/ DataFrame 輸入。

如果資料是包含 dict 的 list ，則 column 的順序遵循插入順序。    

**index** : 索引或類似陣列的物件  

用於生成 DataFrame 的索引。如果輸入資料本身沒有索引資訊，且此參數 index 也沒設定，則預設使用 RangeIndex。  

**columns** : 索引或類似陣列的物件  

當資料本身沒有欄標籤時，用於生成 DataFrame 的欄標籤，預設為 RangeIndex（0、1、2、...、n）。如果資料包含欄標籤，則會執行欄選擇(?)。

**dtype** : dtype，預設為 None。  

要強制使用的資料型別。只允許一個單一的 dtype。如果為 None，則進行推斷。  

**copy** : bool 或 None，預設為 None  

從輸入中複製資料。對於字典資料，預設的 None 行為類似於 copy=True。對於 DataFrame 或 2D ndarray 輸入，預設的 None 行為類似於 copy=False。如果資料是一個包含一個或多個 Series（可能具有不同 dtype）的字典，copy=False 將確保這些輸入不被複製。  

**其他方法**
 
DataFrame.from_records：從 tuple s或 record arrays 建立的建構函式。<br class="new">
DataFrame.from_dict：從 Series、陣列或字典的字典建立的函式。<br class="new">
read_csv：將逗號分隔值（csv）文件讀取為 DataFrame。<br class="new">
read_table：將通用分隔文件讀取為 DataFrame。<br class="new">

<br/>

### 建立 DataFrame

**使用 dict 建立 DataFrame**

```python
d = {'col1': [1, 2], 'col2': [3, 4]}
df = pd.DataFrame(data=d)
df
#     col1  col2
#  0     1     3
#  1     2     4
```

注意，推斷出的 dtype 是 int64。

```python
df.dtypes
#  col1    int64
#  col2    int64
#  dtype: object
```

 為了強制使用單一的 dtype：

```python
df = pd.DataFrame(data=d, dtype=np.int8)
df.dtypes
#  col1    int8
#  col2    int8
#  dtype: object
```

從包含 Series 的字典建構 DataFrame：

```python
d = {'col1': [0, 1, 2, 3], 'col2': pd.Series([2, 3], index=[2, 3])}
pd.DataFrame(data=d, index=[0, 1, 2, 3])
#     col1  col2
#  0     0   NaN
#  1     1   NaN
#  2     2   2.0
#  3     3   3.0
```

從 numpy ndarray 建構 DataFrame：

```python
df2 = pd.DataFrame(np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]),
                    columns=['a', 'b', 'c'])
df2
#     a  b  c
#  0  1  2  3
#  1  4  5  6
#  2  7  8  9
```

從具有標籤欄位的 numpy ndarray 建構 DataFrame：

```python
data = np.array([(1, 2, 3), (4, 5, 6), (7, 8, 9)],
                 dtype=[("a", "i4"), ("b", "i4"), ("c", "i4")])
df3 = pd.DataFrame(data, columns=['c', 'a'])

df3
#     c  a
#  0  3  1
#  1  6  4
#  2  9  7
```

從資料類別（dataclass）建構 DataFrame：

```python
from dataclasses import make_dataclass
Point = make_dataclass("Point", [("x", int), ("y", int)])
pd.DataFrame([Point(0, 0), Point(0, 3), Point(2, 3)])
    x  y
 0  0  0
 1  0  3
 2  2  3
```

從 Series 或 DataFrame 建構 DataFrame：

```python
ser = pd.Series([1, 2, 3], index=["a", "b", "c"])
df = pd.DataFrame(data=ser, index=["a", "c"])
df
#     0
#  a  1
#  c  3

df1 = pd.DataFrame([1, 2, 3], index=["a", "b", "c"], columns=["x"])
df2 = pd.DataFrame(data=df1, index=["a", "c"])
df2
#     x
#  a  1
#  c  3
```
<br/>

### Python 基礎班....

```python
Xd2 =  {'customer': 'c3', 'channel': 's2', 'product': ['p1', 'p2', 'p3']}
Xd3 =  {'customer': ['c1', 'c2'], 'channel': 's1', 'product': ['p1', 'p2', 'p3']}
```

使用 list 來建立 DataFrame，預設的 row/column 都是數字

```python
import pandas as pd
##== (1).
df1 = pd.DataFrame([[1,2,3],[4,5,6]])
print("df1=", df1)
#    0  1  2
# 0  1  2  3
# 1  4  5  6
```


```python
df = pd.DataFrame([[1,2,3],[4,5,6]],index=['row1','row2'],columns=['col1','col2','col3'])
print("df=", df)

```

<br/>

### 由 dict 建立 DataFrame

用 1,1,3 個元素的 dict 可以建立數據框

```python
Xdf2 = pd.DataFrame(Xd2)
print("Xdf2=",Xdf2)
# Xdf=   customer channel product
#    0       c3      s2      p1
#    1       c3      s2      p2
#    2       c3      s2      p3
```

使用另一個 dict 去生成時發生錯誤，用 2,1,3 個元素的 dict 就不可以建立數據框，出現 ValueError 

```python
Xdf2 = pd.DataFrame(Xd2);
# ValueError: All arrays must be of the same length
```
<br/>

### 最常見的 DataFrame 建立方法

```python
Xdf = pd.DataFrame({"customer": ["c1","c2","c3"], "channel": ["s1","s2","s3"], 
                    "product":["p1","p2","p3"], "quantity": [1,1,2], "amount": [1200,800,3200]});   
print("Xdf = ",Xdf)

# Xdf =    customer channel product  quantity  amount
#        0       c1      s1      p1         1    1200
#        1       c2      s2      p2         1     800
#        2       c3      s3      p3         2    3200
```

<br/>

###  DataFrame 樣貌(shape,head)

```python
print("Xdf.shape =",Xdf.shape)
#-- Xdf.shape = (3, 5) -- (row列數,column行數)

print("Xdf.head(2) =",Xdf.head(2))
#-- 前數行(head)與後數行(tail)

# Xdf.head(2) =   customer channel product  quantity  amount
#               0       c1      s1      p1         1    1200
#               1       c2      s2      p2         1     800
```
### 設定索引

```python
Xdf1 = Xdf.copy();            
Xdf1.set_index("customer" , inplace=True);
print(Xdf1)

#          channel product  quantity  amount
# customer                                  
# c1            s1      p1         1    1200
# c2            s2      p2         1     800
# c3            s3      p3         2    3200
```
將 customer設定 index 後，行數會少 1，我們可以從 shape() 得知。

```python
print("Xdf1.shape =",Xdf1.shape)
#-- Xdf1.shape = (3, 4) -- (row列數,column行數)

print("Xdf1.head(2) =",Xdf1.head(2))
#-- 前數行(head)與後數行(tail)
# Xdf1.head(2) =          channel product  quantity  amount
#               customer                                  
#               c1            s1      p1         1    1200
#               c2            s2      p2         1     800
```
### 重設設定索引

```python
print("Xdf1.index=",Xdf1.index)
#-- Xdf1.index= Index(['c1', 'c2', 'c3'], dtype='object', name='customer')

print("Xdf1.columns=",Xdf1.columns)
#-- Xdf1.columns= Index(['channel', 'product', 'quantity', 'amount'], dtype='object')

Xdf2 = Xdf1.reset_index();
print(Xdf2)
#-- Xdf2 和 Xdf 相同
```

### 提取列

```python
print(Xdf1)
#         channel product  quantity  amount
#customer                                  
#c1            s1      p1         1    1200
#c2            s2      p2         1     800
#c3            s3      p3         2    3200
```
提取 index = c2 的列

```python
print("Xdf1.loc['c2']=",Xdf1.loc['c2'])
#-- (a1)提取指定索引的列 .loc['c2']
```

提取第 i 列

```python
print("Xdf1.iloc[2]=",Xdf1.iloc[2])
#-- (a2)提取第 k(2)列: .iloc[2]
```

提取第 slice 列

```python
print("Xdf1[1:3]=",Xdf1[1:3])
#-- (a3)提取第1:3(1-2)列
```

提取行

```python
print("Xdf1['product']=",Xdf1['product'])
#-- (a)按照列名稱，提取指定的行
```

<br/>

### 提取元素

```python
print("Xdf.values[2]=",Xdf.values[2])         #-- [列] --> ['c3' 's3' 'p3' 2 3200]
print("Xdf.values[2][4]=",Xdf.values[2][4])   #-- [列][行] --> 3200
print("Xdf.values[2][4]=",Xdf.values[2][4])   #-- [列][行] --> 3200
```

### 條件提取

```python
Xdf.loc[Xdf['amount']>3000]

# OR
Xdf.loc[(Xdf['amount']<1000)|(Xdf['quantity']>=2)]

# AND
Xdf.loc[(Xdf['amount']<1000)&(Xdf['quantity']<=1)]

#AND
Xdf.loc[(Xdf['amount']<1000)].loc[(Xdf['quantity']<=1)]
```

<br/>

### DataFrame 增減

```python
df4 = pd.DataFrame({"customer":["c4"], "channel":["s4"], "product":["p4"], "quantity":[3], "amount":[1500]})
Xdf4 = pd.concat([Xdf,df4])   
print("Xdf4 = ",Xdf4)

Xdf4a = Xdf4.drop([0],axis=0);

Xdf4b = Xdf4a.drop(["quantity"],axis=1);
```
<br/>

### 讀取 csv

```python
pd.read_csv(wkDir+"target.csv")
```

### Streamlit

執行 streamlit run main.py

```python
# 檔案 main.py

import os
#==> 任何數據分析編程的第一件事：設定工作目錄(Working Directory)
wkDir = "c:/Users/Admin/Desktop/台新python/";   os.chdir(wkDir)
print(os.getcwd())

# Step1. 讀取 DataFrame
import pandas as pd
target = pd.read_csv(wkDir+"data.csv");

import streamlit as st
st.set_option('deprecation.showPyplotGlobalUse', False)

st.title("台新銀行: 大數據實務網站")      #-- canvas
st.sidebar.title("控制盤")               #-- sidebar

if st.sidebar.checkbox("(1) 擷取交易數據 (-->target)"):    #-- (3A) 由用戶於控制盤勾選後,再進行數據讀取
    print("\n\n>>>>> (1) 擷取交易數據 (-->target) -----")  #-- 偵錯用
    target = pd.read_csv(wkDir+"target.csv")                  ##== (D6) 讀取數據框
    st.sidebar.write("* 交易數據檔 = target.csv")          #-- (3B) 以下為 控制盤(sidebar)設計
    st.sidebar.write("* 交易記錄數 = ", target.shape[0])   
    st.header("(1) 擷取交易數據檔(-->target)")             #-- (3B) 以下為 主畫面(content)設計
    st.write("* 交易記錄數 = ", target.shape[0])  
    st.dataframe(target.head(3))

if st.sidebar.checkbox("(2) 產生交易週時模型"):       #-- (A) 由用戶於控制盤勾選後,再進行數據讀取
    print("\n\n>>>>> (2) 產生交易週時模型 -----")     #-- 偵錯用 
    XXX["hour"] = pd.to_datetime(XXX["datetime"]).dt.hour           ##== (G2-1).(KDD3) 產生週/時標籤 (hour,weekday)
    XXX["weekday"] = pd.to_datetime(XXX["datetime"]).dt.weekday    
    TTT = pd.crosstab( XXX["hour"], XXX["weekday"], margins=True ); print(TTT[0:3])  ##== (G2-2).(KDD4) 建立 交易週時模型 (TTT)
    st.header("(2) 交易週時模型(XXX[hour,weekday])")  #-- (B) 以下為 主畫面(content)設計
    st.write("(2A) (KDD3) 產生的數據標籤-- ")  
    st.dataframe(XXX.head(3))
    st.write("(2B) (KDD4) 交易週時模型-- ")  
    st.dataframe(TTT) 
```
 ### sklearn
 
```pthon
##== sklearn/datasets: 提供了一些數據生成器和數據加載工具, 共有24個數據集
from sklearn import datasets
iris = datasets.load_iris()
print(iris.feature_names)   #-- ['sepal length (cm)', 'sepal width (cm)', 'petal length (cm)', 'petal width (cm)']
print(iris.target_names)    #-- ['setosa' 'versicolor' 'virginica']
print(iris.data.shape)      #-- (150,4)
print(iris.data[0:2,])      #-- [[5.1 3.5 1.4 0.2] [4.9 3.  1.4 0.2]]
```

### 寫入 csv

```pthon
ds = pd.read_csv(wkDir+"data_source.csv")
ds.to_excel("new.xlsx")
```

### opensource 抓資料

```pthon
URL = 'https://tcgbusfs.blob.core.windows.net/blobyoubike/YouBikeTP.json'
response = requests.get(URL)
jsonData = response.json()
data = list(jsonData["retVal"].values());
```
<br/>

###　資料分析

量值分析？


# -*- coding: utf-8 -*-
"""
Created on Thu Aug 10 14:26:24 2023

@author: 1051448
"""

import pandas as pd
import numpy as np
#%%##
# 使用字典建立 DataFrame，字典的值是純量
dict = {"col":'a', "col2":'c'}

s1 = pd.DataFrame(dict1)

# 建立失敗錯誤如下，看來純量必須要給 index 參數
# If using all scalar values, you must pass an index

df = pd.DataFrame(dict, index=['row'])
#     col col2
# row   a    c

# 如果多設幾個 index，資料就會複製如下，看起來是指有一列資料才能自我增生

df = pd.DataFrame(dict, index=['row','row2','row3'])
#      col col2
# row    a    c
# row2   a    c
# row3   a    c

# q 不屬於原本的 col，所以選擇不到變成 NaN

df = pd.DataFrame(dict, index=['row','row2','row3'], columns=['q'])
#         q
# row   NaN
# row2  NaN
# row3  NaN

df = pd.DataFrame(dict, index=['row','row2','row3'], columns=['col2'])
#      col2
# row     c
# row2    c
# row3    c

#%%##
# 使用字典建立 DataFrame，字典的值是 list
dict = {"col":['a','b'], "col2":['c','d']}

df = pd.DataFrame(dict)
#   col col2
# 0   a    c
# 1   b    d

# 我們可以看到字典的建值變成了 DataFrame 的行了

# 加入 index 參數時，長度必須相同

df = pd.DataFrame(dict, index=['row1', 'row2', 'row3'])

# ValueError: Length of values (2) does not match length of index (3)

df = pd.DataFrame(dict, index=['row1', 'row2'])
#      col col2
# row1   a    c
# row2   b    d

df = pd.DataFrame(dict, index=['row1'])

# ValueError: Length of values (1) does not match length of index (3)


df = pd.DataFrame(dict, index=['row1', 'row2'], columns=['col'])
#      col
# row1   a
# row2   b

#%%##

# 使用字典建立 DataFrame，字典的值是 Series

s1 = pd.Series([1,2,3])
s2 = pd.Series([4,5,6])

dict = {"col":s1, "col2":s2}

df = pd.DataFrame(dict)
#    col  col2
# 0    1     4
# 1    2     5
# 2    3     6

# 如果使用 index，則 index 必須與 Series 的 index 吻合

df = pd.DataFrame(dict, index=['a','b','c'])
#    col  col2
# a  NaN   NaN
# b  NaN   NaN
# c  NaN   NaN

# index 必須與 Ser

df = pd.DataFrame(dict, index=[0,1,2])
#    col  col2
# 0    1     4
# 1    2     5
# 2    3     6

# index 順序可以換

df = pd.DataFrame(dict, index=[0,2,1])
#    col  col2
# 0    1     4
# 2    3     6
# 1    2     5

# index 可以重複

df = pd.DataFrame(dict, index=[2,2,2])
#    col  col2
# 2    3     6
# 2    3     6
# 2    3     6

# 使用 columns

df = pd.DataFrame(dict, index=[0,1,2], columns=['col'])
#    col
# 0    1
# 1    2
# 2    3

df = pd.DataFrame(dict, index=[0,1,2], columns=['col', 'col', 'col'])
#    col  col  col
# 0    1    1    1
# 1    2    2    2
# 2    3    3    3
#%%##

# 使用字典建立 DataFrame，字典的值是 Series (有index)

s1 = pd.Series([1,2,3], index=['s1','s2','s3'])
s2 = pd.Series([4,5,6])

dict = {"col":s1, "col2":s2}

df = pd.DataFrame(dict)
#     col  col2
# s1  1.0   NaN
# s2  2.0   NaN
# s3  3.0   NaN
# 0   NaN   4.0
# 1   NaN   5.0
# 2   NaN   6.0

# 如果使用 index，則 index 必須與 Series 的 index 吻合

df = pd.DataFrame(dict, index=['s1','s2','s3'])
#     col  col2
# s1    1   NaN
# s2    2   NaN
# s3    3   NaN

df = pd.DataFrame(dict, index=[0,1,2])
#    col  col2
# 0  NaN     4
# 1  NaN     5
# 2  NaN     6

index 順序可以換

df = pd.DataFrame(dict, index=[0,'s2',1])
#     col  col2
# 0   NaN   4.0
# s2  2.0   NaN
# 1   NaN   5.0

@index 可以重複

df = pd.DataFrame(dict, index=['s3','s3','s3'])
#     col  col2
# s3    3   NaN
# s3    3   NaN
# s3    3   NaN


#%%##

# 使用字典建立 DataFrame，字典的值是 Series
# 如果長度不一樣，會自動補 NaN

s1 = pd.Series([1,2])
s2 = pd.Series([4,5,6])

dict = {"col":s1, "col2":s2}

df = pd.DataFrame(dict)
#    col  col2
# 0  1.0     4
# 1  2.0     5
# 2  NaN     6

# 加入 index

df = pd.DataFrame(dict, index=[0])
#    col  col2
# 0    1     4

df = pd.DataFrame(dict, index=[0,1])
#    col  col2
# 0    1     4
# 1    2     5

df = pd.DataFrame(dict, index=[0,1,2])
#    col  col2
# 0  1.0     4
# 1  2.0     5
# 2  NaN     6

df = pd.DataFrame(dict, index=[0,1,2,3])
#    col  col2
# 0  1.0   4.0
# 1  2.0   5.0
# 2  NaN   6.0
# 3  NaN   NaN

觀察結果 : 看起來 index 的長度不需要與 Series 的長度一樣

#%%##

# 使用字典建立 DataFrame，字典的值混合 Series 與 list

s = pd.Series([1,2,3])
l = [4,5,6]

dict = {"col":s, "col2":l}

df = pd.DataFrame(dict)
#    col  col2
# 0    1     4
# 1    2     5
# 2    3     6

# 使用 index

df = pd.DataFrame(dict, index=[0])

# 錯誤
# ValueError: Length of values (3) does not match length of index (1)

df = pd.DataFrame(dict, index=[0,1,2])
#    col  col2
# 0    1     4
# 1    2     5
# 2    3     6

# index 長度要剛好才行，似乎跟 list 有關

#%%##

# 使用字典建立 DataFrame，字典的值是 DataFrame

df1 = pd.DataFrame({"col":[1,2], "col2":[3,4]})
df2 = pd.DataFrame({"col":[5,6], "col2":[7,8]})
df3 = pd.DataFrame({"a":df1, "b":df2}, index=["X"])

# 錯誤
# ValueError: Data must be 1-dimensional

#%%##

# 使用字典建立 DataFrame，字典的值是 ndarray

import numpy as np
r1 = np.array([1,2])
r2 = np.array([1,2])

df = pd.DataFrame({"a":r1, "b":r2})
#    a  b
# 0  1  1
# 1  2  2

# 使用 index

df = pd.DataFrame({"a":r1, "b":r2}, index=["X", "Y"])
#    a  b
# X  1  1
# Y  2  2

df = pd.DataFrame({"a":r1, "b":r2}, index=[1, 0])
#    a  b
# 1  1  1
# 0  2  2

#%%##

# 使用 list 建立 DataFrame，list 的值是純量

l = ['a','b','c']

df = pd.DataFrame(l)
#    0
# 0  a
# 1  b
# 2  c

# 使用 index

df = pd.DataFrame(l, index=['q','p','o'])
#    0
# q  a
# p  b
# o  c

# 設定 index 沒有影響資料取得。還是有取得資料如上，index 長度需一致

#%%##

# 使用 list 建立 DataFrame，list 的值是 list

l = [['a','b','c'],['d','e','f']]

df = pd.DataFrame(l)
#    0  1  2
# 0  a  b  c
# 1  d  e  f

# 使用 index

df = pd.DataFrame(l, index=['X','Y'])
#    0  1  2
# X  a  b  c
# Y  d  e  f

#%%##
# 使用 list 建立 DataFrame，list 的值是 list，list 的長度不一樣

l = [['a','b','c'],['d','e']]

df = pd.DataFrame(l)
#    0  1     2
# 0  a  b     c
# 1  d  e  None

# 使用 index

df = pd.DataFrame(l, index=['X','Y'])
#    0  1     2
# X  a  b     c
# Y  d  e  None

#%%##
# 使用 list 建立 DataFrame，list 的值是 Series

s1 = pd.Series(['a','b','c'])
s2 = pd.Series(['d','e','f'])

l = [s1, s2]

df = pd.DataFrame(l)
#    0  1  2
# 0  a  b  c
# 1  d  e  f

# 使用 index

df = pd.DataFrame(l, index=['X','Y'])
#    0  1  2
# X  a  b  c
# Y  d  e  f

#%%##
# 使用 list 建立 DataFrame，list 的值是 Series 的長度不一樣

s1 = pd.Series(['a','b','c'])
s2 = pd.Series(['d','e'])

l = [s1, s2]

df = pd.DataFrame(l)
#    0  1    2
# 0  a  b    c
# 1  d  e  NaN

# 使用 index

df = pd.DataFrame(l, index=[0,1])
#    0  1    2
# 0  a  b    c
# 1  d  e  NaN

df = pd.DataFrame(l, index=['X','Y'])
#    0  1    2
# X  a  b    c
# Y  d  e  NaN

如果值是 list\ndarray，那麼 index 的長度就一定要剛好，參數 index 在值是 list\ndarray 時不會改變 DataFrame 的內容

#%%##

# 使用 list 建立 DataFrame，list 的值是 ndarray

import numpy as np
r1 = np.array([1,2])
r2 = np.array([3,4])

df = pd.DataFrame([r1, r2])
#    0  1
# 0  1  2
# 1  3  4

# 使用 index

df = pd.DataFrame([r1, r2], index=['X', 'Y'])
#    0  1
# X  1  2
# Y  3  4

#%%##

# 使用 DataFrame 建立 DataFrame

df = pd.DataFrame([1,2,3])
df2 = pd.DataFrame(df)

print(df)
#    0
# 0  1
# 1  2
# 2  3

### 使用參數 index

df2 = pd.DataFrame(df, index=[0])
#    0
# 0  1

df2 = pd.DataFrame(df, index=[2])
#    0
# 2  3

df2 = pd.DataFrame(df, index=['x'])
#     0
# x NaN
