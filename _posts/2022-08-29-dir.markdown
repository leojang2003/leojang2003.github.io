## dir() 方法

內建方法，當沒有傳入參數時，會回傳目前 local scope 的 names。當有傳入參數時，會回傳該物件的 valid attributes

如果物件有定義 __ dir __()方法，則呼叫 dir(物件) 時，會呼叫物件的 __ dir __()方法，

{:.note}
注意 dir() 回傳的是 '目前' 的 local scope，呼叫 dir() 的位置會決定回傳回來是哪種 scope

## dir() 回傳 global scope / built-in scope

```python
# 檔案 mod1.py

name = 'John'
age = 20

print('mod1 starts ....')
print(dir())
print('mod1 ends ....')

def run():
	print('mod1')

```

主檔案 sample.py 如下
```python
import mod1

# 執行 sample.py 結果如下 ...
# mod1 starts ....
# ['__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'age', 'name']
# mod1 ends ....
```

{:.note}
補充說明 :
{:.note}
這裡可以看到可以執行 sample.py 時，import mod1 會呼叫 dir()，其中的 __builtins__ 是一個 dict，值得注意的是，如果是在 __main__ 中呼叫 dir() 則，這裡的 __builtins__ 變成了一個名為 builtins 的 module
{:.note}
                                                                          
{:.note}
根據 Python Doc，多數 modules 都有名為 __builtins__ 在 global scope 中，__builtins__ 的值通常為 builtins 模組，或是該模組的 __dict__ 的值

```python
# 檔案 sample.py
print(__builtins__)

# 執行 sample.py 結果如下 ...
<module 'builtins' (built-in)> 	# 可以看到 __builtins__ 是個 module
print(__builtins__.abs(-10)) 	# 可以呼叫 module 的方法
```

## dir() 回傳 function scope / enclosing scope

執行以下程式

```python
ef father(father_name):
	
	father_desc = f'father is {father_name}'
	print('outer scope names ... ', dir())

	def son(son_name):
		nonlocal father_desc		
		son_desc = f'son is {son_name}'		
		print('inner scope names ... ', dir())
		
	son('Harry')

father('James')

# outer scope names ...  ['father_desc', 'father_name']
# inner scope names ...  ['father_desc', 'son_desc', 'son_name']
```

這裡可以看到在 son() 裡面呼叫 dir()，傳回的是 son() 的 local scope (這裡因為我們有加入 nonlocal 變數 father_desc，所以會回傳 3 個 name，若沒有設定 nonlocal 則僅回回傳 ['son_desc', 'son_name'] )

## 呼叫 dir() 時傳入物件

```python
# 檔案 mod3.py ...
class Mod3:
		
	def __init__(self):		
		pass
		
def run():
	print('mod3')
	
# 檔案 sample.py ...
from mod3 import Mod3
obj = Mod3()
print(dir(obj)) 
#['__class__', '__delattr__', '__dict__', ... , '__subclasshook__', '__weakref__']
```

## 呼叫 dir() 時傳入物件，但自訂物件的 __dir__()

```python
# 檔案 mod3.py ...
class Mod3:
		
	def __init__(self):		
		pass
	
	# 客製化 __dir__()
	def __dir__(self):
		return ['a','b','c']
		
def run():
	print('mod3')
	
# 檔案 sample.py ...
from mod3 import Mod3

obj = Mod3()
print(dir(obj)) # ['a', 'b', 'c']
```

## 傳入不同類型物件，dir()會顯示的內容也不一樣

## 傳入 module 物件
dir() 回傳模組的 attributes 的 names
```python
# 檔案 mod1.py ...
name = 'John'
age = 20

def run():
	print('mod1')
	
# 檔案 sample.py ...
import mod1
print(dir(mod1))
['__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'age', 'name', 'run']
```

## 傳入 type 或 class 物件
dir() 回傳模組的 attributes 的 names，包含父類別的 attributes names

```python
# 檔案 mod2.py ...
class Mod2():
	
	def __init__(self):		
		pass
		
	def run_mod2():
		print('mod2')

# 檔案 mod3.py ...
import mod2

# 繼承 Mod2
class Mod3(mod2.Mod2):
	
	def __init__(self):		
		pass
		
	def run_mod3():
		print('mod3')
	
# 檔案 sample.py ...	
import mod3

obj = mod3.Mod3()
print(dir(obj))
# ['__class__', '__delattr__',... '__weakref__', 'run_mod2', 'run_mod3']
# 父類別 Mod2 的方法 run_mod2 也回傳了	

```
